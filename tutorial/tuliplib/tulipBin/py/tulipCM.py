# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_tulipCM', [dirname(__file__)])
        except ImportError:
            import _tulipCM
            return _tulipCM
        if fp is not None:
            try:
                _mod = imp.load_module('_tulipCM', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _tulipCM = swig_import_helper()
    del swig_import_helper
else:
    import _tulipCM
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _tulipCM.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _tulipCM.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _tulipCM.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _tulipCM.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _tulipCM.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _tulipCM.SwigPyIterator_equal(self, x)

    def copy(self):
        return _tulipCM.SwigPyIterator_copy(self)

    def next(self):
        return _tulipCM.SwigPyIterator_next(self)

    def __next__(self):
        return _tulipCM.SwigPyIterator___next__(self)

    def previous(self):
        return _tulipCM.SwigPyIterator_previous(self)

    def advance(self, n):
        return _tulipCM.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _tulipCM.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _tulipCM.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _tulipCM.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _tulipCM.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _tulipCM.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _tulipCM.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _tulipCM.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class cmModel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cmModel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cmModel, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _tulipCM.cmModel_data_set
    __swig_getmethods__["data"] = _tulipCM.cmModel_data_get
    if _newclass:
        data = _swig_property(_tulipCM.cmModel_data_get, _tulipCM.cmModel_data_set)
    __swig_setmethods__["datasetColumn"] = _tulipCM.cmModel_datasetColumn_set
    __swig_getmethods__["datasetColumn"] = _tulipCM.cmModel_datasetColumn_get
    if _newclass:
        datasetColumn = _swig_property(_tulipCM.cmModel_datasetColumn_get, _tulipCM.cmModel_datasetColumn_set)
    __swig_setmethods__["frozenParamIDX"] = _tulipCM.cmModel_frozenParamIDX_set
    __swig_getmethods__["frozenParamIDX"] = _tulipCM.cmModel_frozenParamIDX_get
    if _newclass:
        frozenParamIDX = _swig_property(_tulipCM.cmModel_frozenParamIDX_get, _tulipCM.cmModel_frozenParamIDX_set)
    __swig_setmethods__["frozenParamVAL"] = _tulipCM.cmModel_frozenParamVAL_set
    __swig_getmethods__["frozenParamVAL"] = _tulipCM.cmModel_frozenParamVAL_get
    if _newclass:
        frozenParamVAL = _swig_property(_tulipCM.cmModel_frozenParamVAL_get, _tulipCM.cmModel_frozenParamVAL_set)
    __swig_destroy__ = _tulipCM.delete_cmModel
    __del__ = lambda self: None

    def getParameterTotal(self):
        return _tulipCM.cmModel_getParameterTotal(self)

    def getStateTotal(self):
        return _tulipCM.cmModel_getStateTotal(self)

    def getResultTotal(self):
        return _tulipCM.cmModel_getResultTotal(self)

    def getParameterLimits(self, limits):
        return _tulipCM.cmModel_getParameterLimits(self, limits)

    def getDefaultParams(self, params):
        return _tulipCM.cmModel_getDefaultParams(self, params)

    def getPriorMapping(self, priorModelType, prPtr):
        return _tulipCM.cmModel_getPriorMapping(self, priorModelType, prPtr)

    def getParamName(self, parID):
        return _tulipCM.cmModel_getParamName(self, parID)

    def getResultName(self, resID):
        return _tulipCM.cmModel_getResultName(self, resID)

    def setData(self, locData, setIDX):
        return _tulipCM.cmModel_setData(self, locData, setIDX)

    def evalModelError(self, *args):
        return _tulipCM.cmModel_evalModelError(self, *args)

    def freezeModelParameters(self, localParamIDX, localParamVal):
        return _tulipCM.cmModel_freezeModelParameters(self, localParamIDX, localParamVal)
cmModel_swigregister = _tulipCM.cmModel_swigregister
cmModel_swigregister(cmModel)

class cmException(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cmException, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cmException, name)
    __repr__ = _swig_repr

    def __init__(self, m):
        this = _tulipCM.new_cmException(m)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _tulipCM.delete_cmException
    __del__ = lambda self: None

    def what(self):
        return _tulipCM.cmException_what(self)
cmException_swigregister = _tulipCM.cmException_swigregister
cmException_swigregister(cmException)
cvar = _tulipCM.cvar
convertmmHgToBarye = cvar.convertmmHgToBarye

class data(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, data, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, data, name)
    __repr__ = _swig_repr
    __swig_setmethods__["xVal"] = _tulipCM.data_xVal_set
    __swig_getmethods__["xVal"] = _tulipCM.data_xVal_get
    if _newclass:
        xVal = _swig_property(_tulipCM.data_xVal_get, _tulipCM.data_xVal_set)
    __swig_setmethods__["yVal"] = _tulipCM.data_yVal_set
    __swig_getmethods__["yVal"] = _tulipCM.data_yVal_get
    if _newclass:
        yVal = _swig_property(_tulipCM.data_yVal_get, _tulipCM.data_yVal_set)

    def __init__(self):
        this = _tulipCM.new_data()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _tulipCM.delete_data
    __del__ = lambda self: None
data_swigregister = _tulipCM.data_swigregister
data_swigregister(data)
ipSortDescending = cvar.ipSortDescending
ipSortAscending = cvar.ipSortAscending

class by_number(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, by_number, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, by_number, name)
    __repr__ = _swig_repr

    def __call__(self, left, right):
        return _tulipCM.by_number___call__(self, left, right)

    def __init__(self):
        this = _tulipCM.new_by_number()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _tulipCM.delete_by_number
    __del__ = lambda self: None
by_number_swigregister = _tulipCM.by_number_swigregister
by_number_swigregister(by_number)

class lpnOptions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, lpnOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, lpnOptions, name)
    __repr__ = _swig_repr
    __swig_setmethods__["writeDebugData"] = _tulipCM.lpnOptions_writeDebugData_set
    __swig_getmethods__["writeDebugData"] = _tulipCM.lpnOptions_writeDebugData_get
    if _newclass:
        writeDebugData = _swig_property(_tulipCM.lpnOptions_writeDebugData_get, _tulipCM.lpnOptions_writeDebugData_set)
    __swig_setmethods__["flushData"] = _tulipCM.lpnOptions_flushData_set
    __swig_getmethods__["flushData"] = _tulipCM.lpnOptions_flushData_get
    if _newclass:
        flushData = _swig_property(_tulipCM.lpnOptions_flushData_get, _tulipCM.lpnOptions_flushData_set)
    __swig_setmethods__["checkLimits"] = _tulipCM.lpnOptions_checkLimits_set
    __swig_getmethods__["checkLimits"] = _tulipCM.lpnOptions_checkLimits_get
    if _newclass:
        checkLimits = _swig_property(_tulipCM.lpnOptions_checkLimits_get, _tulipCM.lpnOptions_checkLimits_set)
    __swig_setmethods__["checkSign"] = _tulipCM.lpnOptions_checkSign_set
    __swig_getmethods__["checkSign"] = _tulipCM.lpnOptions_checkSign_get
    if _newclass:
        checkSign = _swig_property(_tulipCM.lpnOptions_checkSign_get, _tulipCM.lpnOptions_checkSign_set)
    __swig_setmethods__["useFullConstraints"] = _tulipCM.lpnOptions_useFullConstraints_set
    __swig_getmethods__["useFullConstraints"] = _tulipCM.lpnOptions_useFullConstraints_get
    if _newclass:
        useFullConstraints = _swig_property(_tulipCM.lpnOptions_useFullConstraints_get, _tulipCM.lpnOptions_useFullConstraints_set)

    def __init__(self):
        this = _tulipCM.new_lpnOptions()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _tulipCM.delete_lpnOptions
    __del__ = lambda self: None
lpnOptions_swigregister = _tulipCM.lpnOptions_swigregister
lpnOptions_swigregister(lpnOptions)

class model3DRecord(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, model3DRecord, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, model3DRecord, name)
    __repr__ = _swig_repr
    __swig_setmethods__["polyType"] = _tulipCM.model3DRecord_polyType_set
    __swig_getmethods__["polyType"] = _tulipCM.model3DRecord_polyType_get
    if _newclass:
        polyType = _swig_property(_tulipCM.model3DRecord_polyType_get, _tulipCM.model3DRecord_polyType_set)
    __swig_setmethods__["polyOrder"] = _tulipCM.model3DRecord_polyOrder_set
    __swig_getmethods__["polyOrder"] = _tulipCM.model3DRecord_polyOrder_get
    if _newclass:
        polyOrder = _swig_property(_tulipCM.model3DRecord_polyOrder_get, _tulipCM.model3DRecord_polyOrder_set)
    __swig_setmethods__["totDims"] = _tulipCM.model3DRecord_totDims_set
    __swig_getmethods__["totDims"] = _tulipCM.model3DRecord_totDims_get
    if _newclass:
        totDims = _swig_property(_tulipCM.model3DRecord_totDims_get, _tulipCM.model3DRecord_totDims_set)
    __swig_setmethods__["normalizeData"] = _tulipCM.model3DRecord_normalizeData_set
    __swig_getmethods__["normalizeData"] = _tulipCM.model3DRecord_normalizeData_get
    if _newclass:
        normalizeData = _swig_property(_tulipCM.model3DRecord_normalizeData_get, _tulipCM.model3DRecord_normalizeData_set)
    __swig_setmethods__["limits"] = _tulipCM.model3DRecord_limits_set
    __swig_getmethods__["limits"] = _tulipCM.model3DRecord_limits_get
    if _newclass:
        limits = _swig_property(_tulipCM.model3DRecord_limits_get, _tulipCM.model3DRecord_limits_set)
    __swig_setmethods__["expCoeffs"] = _tulipCM.model3DRecord_expCoeffs_set
    __swig_getmethods__["expCoeffs"] = _tulipCM.model3DRecord_expCoeffs_get
    if _newclass:
        expCoeffs = _swig_property(_tulipCM.model3DRecord_expCoeffs_get, _tulipCM.model3DRecord_expCoeffs_set)

    def __init__(self):
        this = _tulipCM.new_model3DRecord()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _tulipCM.delete_model3DRecord
    __del__ = lambda self: None
model3DRecord_swigregister = _tulipCM.model3DRecord_swigregister
model3DRecord_swigregister(model3DRecord)


def ltrim(s):
    return _tulipCM.ltrim(s)
ltrim = _tulipCM.ltrim

def rtrim(s):
    return _tulipCM.rtrim(s)
rtrim = _tulipCM.rtrim

def trim(s):
    return _tulipCM.trim(s)
trim = _tulipCM.trim

def getMax(start, stop, vector):
    return _tulipCM.getMax(start, stop, vector)
getMax = _tulipCM.getMax

def getMin(start, stop, vector):
    return _tulipCM.getMin(start, stop, vector)
getMin = _tulipCM.getMin

def getMean(start, stop, vector):
    return _tulipCM.getMean(start, stop, vector)
getMean = _tulipCM.getMean

def getSum(start, stop, vector):
    return _tulipCM.getSum(start, stop, vector)
getSum = _tulipCM.getSum

def getMaxLoc(start, stop, vector):
    return _tulipCM.getMaxLoc(start, stop, vector)
getMaxLoc = _tulipCM.getMaxLoc

def trapz(*args):
    return _tulipCM.trapz(*args)
trapz = _tulipCM.trapz

def schSplit(*args):
    return _tulipCM.schSplit(*args)
schSplit = _tulipCM.schSplit

def applyCircShift(shift, size, Qvp):
    return _tulipCM.applyCircShift(shift, size, Qvp)
applyCircShift = _tulipCM.applyCircShift

def ReadParamsFromFile(inputFileName, params):
    return _tulipCM.ReadParamsFromFile(inputFileName, params)
ReadParamsFromFile = _tulipCM.ReadParamsFromFile

def readPriorFromFile(inputFileName, prior_num, prAv, prSd):
    return _tulipCM.readPriorFromFile(inputFileName, prior_num, prAv, prSd)
readPriorFromFile = _tulipCM.readPriorFromFile

def readTableFromFile(fileName, samples):
    return _tulipCM.readTableFromFile(fileName, samples)
readTableFromFile = _tulipCM.readTableFromFile

def readIntTableFromCSVFile(fileName, samples):
    return _tulipCM.readIntTableFromCSVFile(fileName, samples)
readIntTableFromCSVFile = _tulipCM.readIntTableFromCSVFile

def readIntVectorFromFile(fileName, vec):
    return _tulipCM.readIntVectorFromFile(fileName, vec)
readIntVectorFromFile = _tulipCM.readIntVectorFromFile

def writeTableToFile(fileName, table):
    return _tulipCM.writeTableToFile(fileName, table)
writeTableToFile = _tulipCM.writeTableToFile

def writeVectorToFile(fileName, vec):
    return _tulipCM.writeVectorToFile(fileName, vec)
writeVectorToFile = _tulipCM.writeVectorToFile

def readVectorFromFile(fileName, column, vec):
    return _tulipCM.readVectorFromFile(fileName, column, vec)
readVectorFromFile = _tulipCM.readVectorFromFile

def WriteResultsToFile(debugFileName, totalSteps, totalStates, time, outVals):
    return _tulipCM.WriteResultsToFile(debugFileName, totalSteps, totalStates, time, outVals)
WriteResultsToFile = _tulipCM.WriteResultsToFile

def printCurvesAndPeaks(fileName, size, t, Q, Q_S, t_S, Q_M, t_M, Q_D, t_D, Q_A, t_A):
    return _tulipCM.printCurvesAndPeaks(fileName, size, t, Q, Q_S, t_S, Q_M, t_M, Q_D, t_D, Q_A, t_A)
printCurvesAndPeaks = _tulipCM.printCurvesAndPeaks

def getHeartStage12BlocksPriorMapping(prPtr):
    return _tulipCM.getHeartStage12BlocksPriorMapping(prPtr)
getHeartStage12BlocksPriorMapping = _tulipCM.getHeartStage12BlocksPriorMapping

def getHeartStage13BlocksPriorMapping(prPtr):
    return _tulipCM.getHeartStage13BlocksPriorMapping(prPtr)
getHeartStage13BlocksPriorMapping = _tulipCM.getHeartStage13BlocksPriorMapping

def getHeartStage2PriorMapping(prPtr):
    return _tulipCM.getHeartStage2PriorMapping(prPtr)
getHeartStage2PriorMapping = _tulipCM.getHeartStage2PriorMapping

def getHeartINDStage12BlocksINDPriorMapping(prPtr):
    return _tulipCM.getHeartINDStage12BlocksINDPriorMapping(prPtr)
getHeartINDStage12BlocksINDPriorMapping = _tulipCM.getHeartINDStage12BlocksINDPriorMapping

def detect_peak(data_count, t, data, S_time, S_peak, S_found, M_time, M_peak, M_found, D_time, D_peak, D_found, A_time, A_peak, A_found, min_Found_Peaks, max_Found_Peaks):
    return _tulipCM.detect_peak(data_count, t, data, S_time, S_peak, S_found, M_time, M_peak, M_found, D_time, D_peak, D_found, A_time, A_peak, A_found, min_Found_Peaks, max_Found_Peaks)
detect_peak = _tulipCM.detect_peak

def linInterp(table, xColumn, yColumn, currX):
    return _tulipCM.linInterp(table, xColumn, yColumn, currX)
linInterp = _tulipCM.linInterp

def read3DModelSurrogateFromFile(fileName, model, printReport):
    return _tulipCM.read3DModelSurrogateFromFile(fileName, model, printReport)
read3DModelSurrogateFromFile = _tulipCM.read3DModelSurrogateFromFile

def getPolyTypeString(polyType):
    return _tulipCM.getPolyTypeString(polyType)
getPolyTypeString = _tulipCM.getPolyTypeString

def isParamPositive(curr_par, limits):
    return _tulipCM.isParamPositive(curr_par, limits)
isParamPositive = _tulipCM.isParamPositive

def isParamNegative(curr_par, limits):
    return _tulipCM.isParamNegative(curr_par, limits)
isParamNegative = _tulipCM.isParamNegative

def readCSStringTableFromFile(fileName, table):
    return _tulipCM.readCSStringTableFromFile(fileName, table)
readCSStringTableFromFile = _tulipCM.readCSStringTableFromFile

def getFrozenParametersFromCSVFile(fileName, frozParIDX, frozParVAL):
    return _tulipCM.getFrozenParametersFromCSVFile(fileName, frozParIDX, frozParVAL)
getFrozenParametersFromCSVFile = _tulipCM.getFrozenParametersFromCSVFile

def getAccelerationTime(start, stop, timeStep, vector, at):
    return _tulipCM.getAccelerationTime(start, stop, timeStep, vector, at)
getAccelerationTime = _tulipCM.getAccelerationTime

def getDecelerationTime(start, stop, timeStep, vector, dt):
    return _tulipCM.getDecelerationTime(start, stop, timeStep, vector, dt)
getDecelerationTime = _tulipCM.getDecelerationTime

def getEARatio(start, stop, vector, EARatio):
    return _tulipCM.getEARatio(start, stop, vector, EARatio)
getEARatio = _tulipCM.getEARatio

def zeroAtValveOpening(start, stop, curve, valveIsOpen):
    return _tulipCM.zeroAtValveOpening(start, stop, curve, valveIsOpen)
zeroAtValveOpening = _tulipCM.zeroAtValveOpening

def subSampleTableData(currTraceFile, totSubSamples, startColumn, endColumn, subSampleTable, sampleIndexes):
    return _tulipCM.subSampleTableData(currTraceFile, totSubSamples, startColumn, endColumn, subSampleTable, sampleIndexes)
subSampleTableData = _tulipCM.subSampleTableData

def subSampleTableDataWithIndex(currTraceFile, sampleIndexes, startColumn, endColumn, subSampleTable):
    return _tulipCM.subSampleTableDataWithIndex(currTraceFile, sampleIndexes, startColumn, endColumn, subSampleTable)
subSampleTableDataWithIndex = _tulipCM.subSampleTableDataWithIndex

def generateFrequencyPlot(minVal, maxVal, values, totBins, normalize, resX, resY):
    return _tulipCM.generateFrequencyPlot(minVal, maxVal, values, totBins, normalize, resX, resY)
generateFrequencyPlot = _tulipCM.generateFrequencyPlot
class cmTutorial(cmModel):
    __swig_setmethods__ = {}
    for _s in [cmModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, cmTutorial, name, value)
    __swig_getmethods__ = {}
    for _s in [cmModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, cmTutorial, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _tulipCM.new_cmTutorial()
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def getParameterTotal(self):
        return _tulipCM.cmTutorial_getParameterTotal(self)

    def getParamName(self, parID):
        return _tulipCM.cmTutorial_getParamName(self, parID)

    def getStateTotal(self):
        return _tulipCM.cmTutorial_getStateTotal(self)

    def getResultTotal(self):
        return _tulipCM.cmTutorial_getResultTotal(self)

    def getResultName(self, resID):
        return _tulipCM.cmTutorial_getResultName(self, resID)

    def getParameterLimits(self, limits):
        return _tulipCM.cmTutorial_getParameterLimits(self, limits)

    def getDefaultParams(self, params):
        return _tulipCM.cmTutorial_getDefaultParams(self, params)

    def getPriorMapping(self, priorModelType, prPtr):
        return _tulipCM.cmTutorial_getPriorMapping(self, priorModelType, prPtr)

    def evalModelError(self, inputs, outputs, errorCode):
        return _tulipCM.cmTutorial_evalModelError(self, inputs, outputs, errorCode)
    __swig_destroy__ = _tulipCM.delete_cmTutorial
    __del__ = lambda self: None
cmTutorial_swigregister = _tulipCM.cmTutorial_swigregister
cmTutorial_swigregister(cmTutorial)
gConst = cvar.gConst

class cmAnalyticalExpressionModel(cmModel):
    __swig_setmethods__ = {}
    for _s in [cmModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, cmAnalyticalExpressionModel, name, value)
    __swig_getmethods__ = {}
    for _s in [cmModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, cmAnalyticalExpressionModel, name)
    __repr__ = _swig_repr

    def __init__(self, localModelType):
        this = _tulipCM.new_cmAnalyticalExpressionModel(localModelType)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def getParameterTotal(self):
        return _tulipCM.cmAnalyticalExpressionModel_getParameterTotal(self)

    def getParamName(self, parID):
        return _tulipCM.cmAnalyticalExpressionModel_getParamName(self, parID)

    def getStateTotal(self):
        return _tulipCM.cmAnalyticalExpressionModel_getStateTotal(self)

    def getResultTotal(self):
        return _tulipCM.cmAnalyticalExpressionModel_getResultTotal(self)

    def getResultName(self, resID):
        return _tulipCM.cmAnalyticalExpressionModel_getResultName(self, resID)

    def getParameterLimits(self, limits):
        return _tulipCM.cmAnalyticalExpressionModel_getParameterLimits(self, limits)

    def getDefaultParams(self, params):
        return _tulipCM.cmAnalyticalExpressionModel_getDefaultParams(self, params)

    def getPriorMapping(self, priorModelType, prPtr):
        return _tulipCM.cmAnalyticalExpressionModel_getPriorMapping(self, priorModelType, prPtr)

    def evalModelError(self, inputs, outputs, errorCode):
        return _tulipCM.cmAnalyticalExpressionModel_evalModelError(self, inputs, outputs, errorCode)
    __swig_destroy__ = _tulipCM.delete_cmAnalyticalExpressionModel
    __del__ = lambda self: None
cmAnalyticalExpressionModel_swigregister = _tulipCM.cmAnalyticalExpressionModel_swigregister
cmAnalyticalExpressionModel_swigregister(cmAnalyticalExpressionModel)
kAnalyticalModelUnity2D = cvar.kAnalyticalModelUnity2D
kAnalyticalModelLinear2D = cvar.kAnalyticalModelLinear2D
kModelDiscAgarwal = cvar.kModelDiscAgarwal
kModelZabarasSP = cvar.kModelZabarasSP
kAnalyticalPiecewiseLinear1D = cvar.kAnalyticalPiecewiseLinear1D
kAnalyticalConstant = cvar.kAnalyticalConstant
kAnalyticalLinear = cvar.kAnalyticalLinear
kAnalyticalQuadratic = cvar.kAnalyticalQuadratic
kIdentity = cvar.kIdentity
kTransformedGaussian = cvar.kTransformedGaussian

class cmLPNModel(cmModel):
    __swig_setmethods__ = {}
    for _s in [cmModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, cmLPNModel, name, value)
    __swig_getmethods__ = {}
    for _s in [cmModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, cmLPNModel, name)
    __repr__ = _swig_repr
    __swig_setmethods__["integrator"] = _tulipCM.cmLPNModel_integrator_set
    __swig_getmethods__["integrator"] = _tulipCM.cmLPNModel_integrator_get
    if _newclass:
        integrator = _swig_property(_tulipCM.cmLPNModel_integrator_get, _tulipCM.cmLPNModel_integrator_set)

    def __init__(self, integrator):
        this = _tulipCM.new_cmLPNModel(integrator)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _tulipCM.delete_cmLPNModel
    __del__ = lambda self: None

    def getParameterTotal(self):
        return _tulipCM.cmLPNModel_getParameterTotal(self)

    def getStateTotal(self):
        return _tulipCM.cmLPNModel_getStateTotal(self)

    def getResultTotal(self):
        return _tulipCM.cmLPNModel_getResultTotal(self)

    def getParameterLimits(self, limits):
        return _tulipCM.cmLPNModel_getParameterLimits(self, limits)

    def getDefaultParams(self, params):
        return _tulipCM.cmLPNModel_getDefaultParams(self, params)

    def getPriorMapping(self, priorModelType, prPtr):
        return _tulipCM.cmLPNModel_getPriorMapping(self, priorModelType, prPtr)

    def getParamName(self, parID):
        return _tulipCM.cmLPNModel_getParamName(self, parID)

    def getResultName(self, resID):
        return _tulipCM.cmLPNModel_getResultName(self, resID)

    def evalModelError(self, inputs, outputs, errorCode):
        return _tulipCM.cmLPNModel_evalModelError(self, inputs, outputs, errorCode)
cmLPNModel_swigregister = _tulipCM.cmLPNModel_swigregister
cmLPNModel_swigregister(cmLPNModel)

class cmTableInterpolator(cmModel):
    __swig_setmethods__ = {}
    for _s in [cmModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, cmTableInterpolator, name, value)
    __swig_getmethods__ = {}
    for _s in [cmModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, cmTableInterpolator, name)
    __repr__ = _swig_repr

    def __init__(self, tableFile, weightFile, interpolationMethod, order, localTotInputs, localInputCols, localTotOutputs, localOutputCols, localTargetAV, localTargetSD):
        this = _tulipCM.new_cmTableInterpolator(tableFile, weightFile, interpolationMethod, order, localTotInputs, localInputCols, localTotOutputs, localOutputCols, localTargetAV, localTargetSD)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def getParameterTotal(self):
        return _tulipCM.cmTableInterpolator_getParameterTotal(self)

    def getParamName(self, parID):
        return _tulipCM.cmTableInterpolator_getParamName(self, parID)

    def getStateTotal(self):
        return _tulipCM.cmTableInterpolator_getStateTotal(self)

    def getResultTotal(self):
        return _tulipCM.cmTableInterpolator_getResultTotal(self)

    def getResultName(self, resID):
        return _tulipCM.cmTableInterpolator_getResultName(self, resID)

    def getParameterLimits(self, limits):
        return _tulipCM.cmTableInterpolator_getParameterLimits(self, limits)

    def getDefaultParams(self, params):
        return _tulipCM.cmTableInterpolator_getDefaultParams(self, params)

    def getPriorMapping(self, priorModelType, prPtr):
        return _tulipCM.cmTableInterpolator_getPriorMapping(self, priorModelType, prPtr)

    def evalModelError(self, inputs, outputs, errorCode):
        return _tulipCM.cmTableInterpolator_evalModelError(self, inputs, outputs, errorCode)
    __swig_destroy__ = _tulipCM.delete_cmTableInterpolator
    __del__ = lambda self: None
cmTableInterpolator_swigregister = _tulipCM.cmTableInterpolator_swigregister
cmTableInterpolator_swigregister(cmTableInterpolator)
kLeastSquares = cvar.kLeastSquares
kBayesCS = cvar.kBayesCS
kSparseGrid = cvar.kSparseGrid
kNearestNighbor = cvar.kNearestNighbor

class cmSimpleNonLin(cmModel):
    __swig_setmethods__ = {}
    for _s in [cmModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, cmSimpleNonLin, name, value)
    __swig_getmethods__ = {}
    for _s in [cmModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, cmSimpleNonLin, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _tulipCM.new_cmSimpleNonLin()
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def getParameterTotal(self):
        return _tulipCM.cmSimpleNonLin_getParameterTotal(self)

    def getStateTotal(self):
        return _tulipCM.cmSimpleNonLin_getStateTotal(self)

    def getResultTotal(self):
        return _tulipCM.cmSimpleNonLin_getResultTotal(self)

    def getParameterLimits(self, limits):
        return _tulipCM.cmSimpleNonLin_getParameterLimits(self, limits)

    def getDefaultParams(self, params):
        return _tulipCM.cmSimpleNonLin_getDefaultParams(self, params)

    def getPriorMapping(self, priorModelType, prPtr):
        return _tulipCM.cmSimpleNonLin_getPriorMapping(self, priorModelType, prPtr)

    def getParamName(self, parID):
        return _tulipCM.cmSimpleNonLin_getParamName(self, parID)

    def getResultName(self, resID):
        return _tulipCM.cmSimpleNonLin_getResultName(self, resID)

    def evalModelError(self, inputs, outputs, errorCode):
        return _tulipCM.cmSimpleNonLin_evalModelError(self, inputs, outputs, errorCode)
    __swig_destroy__ = _tulipCM.delete_cmSimpleNonLin
    __del__ = lambda self: None
cmSimpleNonLin_swigregister = _tulipCM.cmSimpleNonLin_swigregister
cmSimpleNonLin_swigregister(cmSimpleNonLin)

class cmResistanceModel(cmModel):
    __swig_setmethods__ = {}
    for _s in [cmModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, cmResistanceModel, name, value)
    __swig_getmethods__ = {}
    for _s in [cmModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, cmResistanceModel, name)
    __repr__ = _swig_repr

    def __init__(self, resValue, distPressHistory):
        this = _tulipCM.new_cmResistanceModel(resValue, distPressHistory)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def getParameterTotal(self):
        return _tulipCM.cmResistanceModel_getParameterTotal(self)

    def getParamName(self, parID):
        return _tulipCM.cmResistanceModel_getParamName(self, parID)

    def getStateTotal(self):
        return _tulipCM.cmResistanceModel_getStateTotal(self)

    def getResultTotal(self):
        return _tulipCM.cmResistanceModel_getResultTotal(self)

    def getResultName(self, resID):
        return _tulipCM.cmResistanceModel_getResultName(self, resID)

    def getParameterLimits(self, limits):
        return _tulipCM.cmResistanceModel_getParameterLimits(self, limits)

    def getDefaultParams(self, params):
        return _tulipCM.cmResistanceModel_getDefaultParams(self, params)

    def getPriorMapping(self, priorModelType, prPtr):
        return _tulipCM.cmResistanceModel_getPriorMapping(self, priorModelType, prPtr)

    def evalModelError(self, *args):
        return _tulipCM.cmResistanceModel_evalModelError(self, *args)
    __swig_destroy__ = _tulipCM.delete_cmResistanceModel
    __del__ = lambda self: None
cmResistanceModel_swigregister = _tulipCM.cmResistanceModel_swigregister
cmResistanceModel_swigregister(cmResistanceModel)


_tulipCM.stdGaussianPDF_swigconstant(_tulipCM)
stdGaussianPDF = _tulipCM.stdGaussianPDF

_tulipCM.bimodalPDF_swigconstant(_tulipCM)
bimodalPDF = _tulipCM.bimodalPDF

_tulipCM.uniformPDF_swigconstant(_tulipCM)
uniformPDF = _tulipCM.uniformPDF

_tulipCM.multimodalPDF_swigconstant(_tulipCM)
multimodalPDF = _tulipCM.multimodalPDF
class cmPDFKnownPDF(cmModel):
    __swig_setmethods__ = {}
    for _s in [cmModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, cmPDFKnownPDF, name, value)
    __swig_getmethods__ = {}
    for _s in [cmModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, cmPDFKnownPDF, name)
    __repr__ = _swig_repr

    def __init__(self, PDFType):
        this = _tulipCM.new_cmPDFKnownPDF(PDFType)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def getParameterTotal(self):
        return _tulipCM.cmPDFKnownPDF_getParameterTotal(self)

    def getResultTotal(self):
        return _tulipCM.cmPDFKnownPDF_getResultTotal(self)

    def getDefaultParams(self, params):
        return _tulipCM.cmPDFKnownPDF_getDefaultParams(self, params)

    def getParameterLimits(self, limits):
        return _tulipCM.cmPDFKnownPDF_getParameterLimits(self, limits)

    def evalModelError(self, inputs, outputs, errorCode):
        return _tulipCM.cmPDFKnownPDF_evalModelError(self, inputs, outputs, errorCode)

    def getParamName(self, parID):
        return _tulipCM.cmPDFKnownPDF_getParamName(self, parID)

    def getResultName(self, resID):
        return _tulipCM.cmPDFKnownPDF_getResultName(self, resID)

    def getStateTotal(self):
        return _tulipCM.cmPDFKnownPDF_getStateTotal(self)

    def getAuxStateTotal(self):
        return _tulipCM.cmPDFKnownPDF_getAuxStateTotal(self)

    def getPriorMapping(self, priorModelType, prPtr):
        return _tulipCM.cmPDFKnownPDF_getPriorMapping(self, priorModelType, prPtr)
    __swig_destroy__ = _tulipCM.delete_cmPDFKnownPDF
    __del__ = lambda self: None
cmPDFKnownPDF_swigregister = _tulipCM.cmPDFKnownPDF_swigregister
cmPDFKnownPDF_swigregister(cmPDFKnownPDF)

class cmKraichnanOrszagModel(cmModel):
    __swig_setmethods__ = {}
    for _s in [cmModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, cmKraichnanOrszagModel, name, value)
    __swig_getmethods__ = {}
    for _s in [cmModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, cmKraichnanOrszagModel, name)
    __repr__ = _swig_repr

    def __init__(self, localDims, localTimeStep, localTotalTime, localSaveEvery):
        this = _tulipCM.new_cmKraichnanOrszagModel(localDims, localTimeStep, localTotalTime, localSaveEvery)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def getParameterTotal(self):
        return _tulipCM.cmKraichnanOrszagModel_getParameterTotal(self)

    def getParamName(self, parID):
        return _tulipCM.cmKraichnanOrszagModel_getParamName(self, parID)

    def getStateTotal(self):
        return _tulipCM.cmKraichnanOrszagModel_getStateTotal(self)

    def getResultTotal(self):
        return _tulipCM.cmKraichnanOrszagModel_getResultTotal(self)

    def getResultName(self, resID):
        return _tulipCM.cmKraichnanOrszagModel_getResultName(self, resID)

    def getParameterLimits(self, limits):
        return _tulipCM.cmKraichnanOrszagModel_getParameterLimits(self, limits)

    def getDefaultParams(self, params):
        return _tulipCM.cmKraichnanOrszagModel_getDefaultParams(self, params)

    def getPriorMapping(self, priorModelType, prPtr):
        return _tulipCM.cmKraichnanOrszagModel_getPriorMapping(self, priorModelType, prPtr)

    def evalModelError(self, inputs, outputs, errorCode):
        return _tulipCM.cmKraichnanOrszagModel_evalModelError(self, inputs, outputs, errorCode)
    __swig_destroy__ = _tulipCM.delete_cmKraichnanOrszagModel
    __del__ = lambda self: None
cmKraichnanOrszagModel_swigregister = _tulipCM.cmKraichnanOrszagModel_swigregister
cmKraichnanOrszagModel_swigregister(cmKraichnanOrszagModel)

class cmArmVenousOcclusion(cmModel):
    __swig_setmethods__ = {}
    for _s in [cmModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, cmArmVenousOcclusion, name, value)
    __swig_getmethods__ = {}
    for _s in [cmModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, cmArmVenousOcclusion, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _tulipCM.new_cmArmVenousOcclusion()
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def getParameterTotal(self):
        return _tulipCM.cmArmVenousOcclusion_getParameterTotal(self)

    def getParamName(self, parID):
        return _tulipCM.cmArmVenousOcclusion_getParamName(self, parID)

    def getStateTotal(self):
        return _tulipCM.cmArmVenousOcclusion_getStateTotal(self)

    def getResultTotal(self):
        return _tulipCM.cmArmVenousOcclusion_getResultTotal(self)

    def getResultName(self, resID):
        return _tulipCM.cmArmVenousOcclusion_getResultName(self, resID)

    def getParameterLimits(self, limits):
        return _tulipCM.cmArmVenousOcclusion_getParameterLimits(self, limits)

    def getDefaultParams(self, params):
        return _tulipCM.cmArmVenousOcclusion_getDefaultParams(self, params)

    def getPriorMapping(self, priorModelType, prPtr):
        return _tulipCM.cmArmVenousOcclusion_getPriorMapping(self, priorModelType, prPtr)

    def evalModelError(self, *args):
        return _tulipCM.cmArmVenousOcclusion_evalModelError(self, *args)
    __swig_destroy__ = _tulipCM.delete_cmArmVenousOcclusion
    __del__ = lambda self: None
cmArmVenousOcclusion_swigregister = _tulipCM.cmArmVenousOcclusion_swigregister
cmArmVenousOcclusion_swigregister(cmArmVenousOcclusion)
ipArterialFlux = cvar.ipArterialFlux
ipVenousFlux = cvar.ipVenousFlux
ipVenousPressure = cvar.ipVenousPressure

class cm3DPQSurrogateModel(cmModel):
    __swig_setmethods__ = {}
    for _s in [cmModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, cm3DPQSurrogateModel, name, value)
    __swig_getmethods__ = {}
    for _s in [cmModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, cm3DPQSurrogateModel, name)
    __repr__ = _swig_repr

    def __init__(self, polyType, polyOrder, normalizeData, limits, locExpCoeffs):
        this = _tulipCM.new_cm3DPQSurrogateModel(polyType, polyOrder, normalizeData, limits, locExpCoeffs)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def getParameterTotal(self):
        return _tulipCM.cm3DPQSurrogateModel_getParameterTotal(self)

    def getParamName(self, parID):
        return _tulipCM.cm3DPQSurrogateModel_getParamName(self, parID)

    def getParameterLimits(self, limits):
        return _tulipCM.cm3DPQSurrogateModel_getParameterLimits(self, limits)

    def getDefaultParams(self, params):
        return _tulipCM.cm3DPQSurrogateModel_getDefaultParams(self, params)

    def getStateTotal(self):
        return _tulipCM.cm3DPQSurrogateModel_getStateTotal(self)

    def getResultTotal(self):
        return _tulipCM.cm3DPQSurrogateModel_getResultTotal(self)

    def getResultName(self, resID):
        return _tulipCM.cm3DPQSurrogateModel_getResultName(self, resID)

    def getPriorMapping(self, priorModelType, prPtr):
        return _tulipCM.cm3DPQSurrogateModel_getPriorMapping(self, priorModelType, prPtr)

    def evalModelError(self, *args):
        return _tulipCM.cm3DPQSurrogateModel_evalModelError(self, *args)
    __swig_destroy__ = _tulipCM.delete_cm3DPQSurrogateModel
    __del__ = lambda self: None
cm3DPQSurrogateModel_swigregister = _tulipCM.cm3DPQSurrogateModel_swigregister
cm3DPQSurrogateModel_swigregister(cm3DPQSurrogateModel)

class cmStressStretch_SHRA(cmModel):
    __swig_setmethods__ = {}
    for _s in [cmModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, cmStressStretch_SHRA, name, value)
    __swig_getmethods__ = {}
    for _s in [cmModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, cmStressStretch_SHRA, name)
    __repr__ = _swig_repr
    __swig_setmethods__["lambdaZ"] = _tulipCM.cmStressStretch_SHRA_lambdaZ_set
    __swig_getmethods__["lambdaZ"] = _tulipCM.cmStressStretch_SHRA_lambdaZ_get
    if _newclass:
        lambdaZ = _swig_property(_tulipCM.cmStressStretch_SHRA_lambdaZ_get, _tulipCM.cmStressStretch_SHRA_lambdaZ_set)

    def __init__(self, arg2):
        this = _tulipCM.new_cmStressStretch_SHRA(arg2)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _tulipCM.delete_cmStressStretch_SHRA
    __del__ = lambda self: None

    def getParameterTotal(self):
        return _tulipCM.cmStressStretch_SHRA_getParameterTotal(self)

    def getStateTotal(self):
        return _tulipCM.cmStressStretch_SHRA_getStateTotal(self)

    def getResultTotal(self):
        return _tulipCM.cmStressStretch_SHRA_getResultTotal(self)

    def getParameterLimits(self, limits):
        return _tulipCM.cmStressStretch_SHRA_getParameterLimits(self, limits)

    def getDefaultParams(self, params):
        return _tulipCM.cmStressStretch_SHRA_getDefaultParams(self, params)

    def getPriorMapping(self, priorModelType, prPtr):
        return _tulipCM.cmStressStretch_SHRA_getPriorMapping(self, priorModelType, prPtr)

    def getParamName(self, parID):
        return _tulipCM.cmStressStretch_SHRA_getParamName(self, parID)

    def getResultName(self, resID):
        return _tulipCM.cmStressStretch_SHRA_getResultName(self, resID)

    def evalModelError(self, inputs, outputs, errorCode):
        return _tulipCM.cmStressStretch_SHRA_evalModelError(self, inputs, outputs, errorCode)

    def setModelResults(self, outputs, keys, computedValues, stdFactors, weigths):
        return _tulipCM.cmStressStretch_SHRA_setModelResults(self, outputs, keys, computedValues, stdFactors, weigths)
cmStressStretch_SHRA_swigregister = _tulipCM.cmStressStretch_SHRA_swigregister
cmStressStretch_SHRA_swigregister(cmStressStretch_SHRA)

class cmStressStretch_GOH(cmModel):
    __swig_setmethods__ = {}
    for _s in [cmModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, cmStressStretch_GOH, name, value)
    __swig_getmethods__ = {}
    for _s in [cmModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, cmStressStretch_GOH, name)
    __repr__ = _swig_repr
    __swig_setmethods__["lambdaZ"] = _tulipCM.cmStressStretch_GOH_lambdaZ_set
    __swig_getmethods__["lambdaZ"] = _tulipCM.cmStressStretch_GOH_lambdaZ_get
    if _newclass:
        lambdaZ = _swig_property(_tulipCM.cmStressStretch_GOH_lambdaZ_get, _tulipCM.cmStressStretch_GOH_lambdaZ_set)

    def __init__(self, arg2):
        this = _tulipCM.new_cmStressStretch_GOH(arg2)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _tulipCM.delete_cmStressStretch_GOH
    __del__ = lambda self: None

    def getParameterTotal(self):
        return _tulipCM.cmStressStretch_GOH_getParameterTotal(self)

    def getStateTotal(self):
        return _tulipCM.cmStressStretch_GOH_getStateTotal(self)

    def getResultTotal(self):
        return _tulipCM.cmStressStretch_GOH_getResultTotal(self)

    def getParameterLimits(self, limits):
        return _tulipCM.cmStressStretch_GOH_getParameterLimits(self, limits)

    def getDefaultParams(self, params):
        return _tulipCM.cmStressStretch_GOH_getDefaultParams(self, params)

    def getPriorMapping(self, priorModelType, prPtr):
        return _tulipCM.cmStressStretch_GOH_getPriorMapping(self, priorModelType, prPtr)

    def getParamName(self, parID):
        return _tulipCM.cmStressStretch_GOH_getParamName(self, parID)

    def getResultName(self, resID):
        return _tulipCM.cmStressStretch_GOH_getResultName(self, resID)

    def evalModelError(self, inputs, outputs, errorCode):
        return _tulipCM.cmStressStretch_GOH_evalModelError(self, inputs, outputs, errorCode)

    def setModelResults(self, outputs, keys, computedValues, stdFactors, weigths):
        return _tulipCM.cmStressStretch_GOH_setModelResults(self, outputs, keys, computedValues, stdFactors, weigths)
cmStressStretch_GOH_swigregister = _tulipCM.cmStressStretch_GOH_swigregister
cmStressStretch_GOH_swigregister(cmStressStretch_GOH)

class cmStressStretch_FR(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cmStressStretch_FR, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cmStressStretch_FR, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sigmaZ"] = _tulipCM.cmStressStretch_FR_sigmaZ_set
    __swig_getmethods__["sigmaZ"] = _tulipCM.cmStressStretch_FR_sigmaZ_get
    if _newclass:
        sigmaZ = _swig_property(_tulipCM.cmStressStretch_FR_sigmaZ_get, _tulipCM.cmStressStretch_FR_sigmaZ_set)

    def __init__(self, sigma):
        this = _tulipCM.new_cmStressStretch_FR(sigma)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _tulipCM.delete_cmStressStretch_FR
    __del__ = lambda self: None

    def getParameterTotal(self):
        return _tulipCM.cmStressStretch_FR_getParameterTotal(self)

    def getStateTotal(self):
        return _tulipCM.cmStressStretch_FR_getStateTotal(self)

    def getResultTotal(self):
        return _tulipCM.cmStressStretch_FR_getResultTotal(self)

    def getParameterLimits(self, limits):
        return _tulipCM.cmStressStretch_FR_getParameterLimits(self, limits)

    def getDefaultParams(self, params):
        return _tulipCM.cmStressStretch_FR_getDefaultParams(self, params)

    def getPriorMapping(self, priorModelType, prPtr):
        return _tulipCM.cmStressStretch_FR_getPriorMapping(self, priorModelType, prPtr)

    def getParamName(self, parID):
        return _tulipCM.cmStressStretch_FR_getParamName(self, parID)

    def getResultName(self, resID):
        return _tulipCM.cmStressStretch_FR_getResultName(self, resID)

    def evalModelError(self, inputs, outputs, errorCode):
        return _tulipCM.cmStressStretch_FR_evalModelError(self, inputs, outputs, errorCode)
cmStressStretch_FR_swigregister = _tulipCM.cmStressStretch_FR_swigregister
cmStressStretch_FR_swigregister(cmStressStretch_FR)

class odeIntegrator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, odeIntegrator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, odeIntegrator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_setmethods__["timeStep"] = _tulipCM.odeIntegrator_timeStep_set
    __swig_getmethods__["timeStep"] = _tulipCM.odeIntegrator_timeStep_get
    if _newclass:
        timeStep = _swig_property(_tulipCM.odeIntegrator_timeStep_get, _tulipCM.odeIntegrator_timeStep_set)
    __swig_setmethods__["totalCycles"] = _tulipCM.odeIntegrator_totalCycles_set
    __swig_getmethods__["totalCycles"] = _tulipCM.odeIntegrator_totalCycles_get
    if _newclass:
        totalCycles = _swig_property(_tulipCM.odeIntegrator_totalCycles_get, _tulipCM.odeIntegrator_totalCycles_set)
    __swig_setmethods__["ode"] = _tulipCM.odeIntegrator_ode_set
    __swig_getmethods__["ode"] = _tulipCM.odeIntegrator_ode_get
    if _newclass:
        ode = _swig_property(_tulipCM.odeIntegrator_ode_get, _tulipCM.odeIntegrator_ode_set)
    __swig_setmethods__["forcing"] = _tulipCM.odeIntegrator_forcing_set
    __swig_getmethods__["forcing"] = _tulipCM.odeIntegrator_forcing_get
    if _newclass:
        forcing = _swig_property(_tulipCM.odeIntegrator_forcing_get, _tulipCM.odeIntegrator_forcing_set)
    __swig_destroy__ = _tulipCM.delete_odeIntegrator
    __del__ = lambda self: None

    def run(self, totalSteps, iniVals, params, outVals, auxOutVals):
        return _tulipCM.odeIntegrator_run(self, totalSteps, iniVals, params, outVals, auxOutVals)
odeIntegrator_swigregister = _tulipCM.odeIntegrator_swigregister
odeIntegrator_swigregister(odeIntegrator)

class odeIntegratorRK4(odeIntegrator):
    __swig_setmethods__ = {}
    for _s in [odeIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, odeIntegratorRK4, name, value)
    __swig_getmethods__ = {}
    for _s in [odeIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, odeIntegratorRK4, name)
    __repr__ = _swig_repr

    def __init__(self, odeModel, timeStep, totalCycles):
        this = _tulipCM.new_odeIntegratorRK4(odeModel, timeStep, totalCycles)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _tulipCM.delete_odeIntegratorRK4
    __del__ = lambda self: None

    def run(self, totalSteps, iniVals, params, outVals, auxOutVals):
        return _tulipCM.odeIntegratorRK4_run(self, totalSteps, iniVals, params, outVals, auxOutVals)
odeIntegratorRK4_swigregister = _tulipCM.odeIntegratorRK4_swigregister
odeIntegratorRK4_swigregister(odeIntegratorRK4)

class odeModel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, odeModel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, odeModel, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _tulipCM.odeModel_data_set
    __swig_getmethods__["data"] = _tulipCM.odeModel_data_get
    if _newclass:
        data = _swig_property(_tulipCM.odeModel_data_get, _tulipCM.odeModel_data_set)
    __swig_setmethods__["datasetColumn"] = _tulipCM.odeModel_datasetColumn_set
    __swig_getmethods__["datasetColumn"] = _tulipCM.odeModel_datasetColumn_get
    if _newclass:
        datasetColumn = _swig_property(_tulipCM.odeModel_datasetColumn_get, _tulipCM.odeModel_datasetColumn_set)
    __swig_setmethods__["frozenParamIDX"] = _tulipCM.odeModel_frozenParamIDX_set
    __swig_getmethods__["frozenParamIDX"] = _tulipCM.odeModel_frozenParamIDX_get
    if _newclass:
        frozenParamIDX = _swig_property(_tulipCM.odeModel_frozenParamIDX_get, _tulipCM.odeModel_frozenParamIDX_set)
    __swig_setmethods__["frozenParamVAL"] = _tulipCM.odeModel_frozenParamVAL_set
    __swig_getmethods__["frozenParamVAL"] = _tulipCM.odeModel_frozenParamVAL_get
    if _newclass:
        frozenParamVAL = _swig_property(_tulipCM.odeModel_frozenParamVAL_get, _tulipCM.odeModel_frozenParamVAL_set)
    __swig_destroy__ = _tulipCM.delete_odeModel
    __del__ = lambda self: None

    def getParameterTotal(self):
        return _tulipCM.odeModel_getParameterTotal(self)

    def getStateTotal(self):
        return _tulipCM.odeModel_getStateTotal(self)

    def getResultTotal(self):
        return _tulipCM.odeModel_getResultTotal(self)

    def getAuxStateTotal(self):
        return _tulipCM.odeModel_getAuxStateTotal(self)

    def getParameterLimits(self, limits):
        return _tulipCM.odeModel_getParameterLimits(self, limits)

    def getDefaultParams(self, params):
        return _tulipCM.odeModel_getDefaultParams(self, params)

    def getParamName(self, parID):
        return _tulipCM.odeModel_getParamName(self, parID)

    def getResultName(self, resID):
        return _tulipCM.odeModel_getResultName(self, resID)

    def evalDeriv(self, t, Xk, params, fn, DXk, auxOut, Ind):
        return _tulipCM.odeModel_evalDeriv(self, t, Xk, params, fn, DXk, auxOut, Ind)

    def postProcess(self, timeStep, totalStepsOnSingleCycle, totalSteps, params, outVals, auxOutVals, results):
        return _tulipCM.odeModel_postProcess(self, timeStep, totalStepsOnSingleCycle, totalSteps, params, outVals, auxOutVals, results)

    def getResultKeys(self, keys):
        return _tulipCM.odeModel_getResultKeys(self, keys)

    def getFinalOutputs(self, outputs, outs):
        return _tulipCM.odeModel_getFinalOutputs(self, outputs, outs)

    def getDataSTD(self, stds):
        return _tulipCM.odeModel_getDataSTD(self, stds)

    def getResultWeigths(self, weights):
        return _tulipCM.odeModel_getResultWeigths(self, weights)

    def getHRIndex(self):
        return _tulipCM.odeModel_getHRIndex(self)
odeModel_swigregister = _tulipCM.odeModel_swigregister
odeModel_swigregister(odeModel)

class odeNormalAdultSimplePA(odeModel):
    __swig_setmethods__ = {}
    for _s in [odeModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, odeNormalAdultSimplePA, name, value)
    __swig_getmethods__ = {}
    for _s in [odeModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, odeNormalAdultSimplePA, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _tulipCM.new_odeNormalAdultSimplePA()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _tulipCM.delete_odeNormalAdultSimplePA
    __del__ = lambda self: None

    def getParameterTotal(self):
        return _tulipCM.odeNormalAdultSimplePA_getParameterTotal(self)

    def getParamName(self, parID):
        return _tulipCM.odeNormalAdultSimplePA_getParamName(self, parID)

    def getStateTotal(self):
        return _tulipCM.odeNormalAdultSimplePA_getStateTotal(self)

    def getResultTotal(self):
        return _tulipCM.odeNormalAdultSimplePA_getResultTotal(self)

    def getAuxStateTotal(self):
        return _tulipCM.odeNormalAdultSimplePA_getAuxStateTotal(self)

    def getResultName(self, resID):
        return _tulipCM.odeNormalAdultSimplePA_getResultName(self, resID)

    def getParameterLimits(self, limits):
        return _tulipCM.odeNormalAdultSimplePA_getParameterLimits(self, limits)

    def getDefaultParams(self, params):
        return _tulipCM.odeNormalAdultSimplePA_getDefaultParams(self, params)

    def evalDeriv(self, t, Xk, params, fn, DXk, auxOut, Ind):
        return _tulipCM.odeNormalAdultSimplePA_evalDeriv(self, t, Xk, params, fn, DXk, auxOut, Ind)

    def postProcess(self, timeStep, totalStepsOnSingleCycle, totalSteps, params, outVals, auxOutVals, results):
        return _tulipCM.odeNormalAdultSimplePA_postProcess(self, timeStep, totalStepsOnSingleCycle, totalSteps, params, outVals, auxOutVals, results)

    def getResultKeys(self, keys):
        return _tulipCM.odeNormalAdultSimplePA_getResultKeys(self, keys)

    def getFinalOutputs(self, outputs, outs):
        return _tulipCM.odeNormalAdultSimplePA_getFinalOutputs(self, outputs, outs)

    def getDataSTD(self, stds):
        return _tulipCM.odeNormalAdultSimplePA_getDataSTD(self, stds)

    def getResultWeigths(self, weights):
        return _tulipCM.odeNormalAdultSimplePA_getResultWeigths(self, weights)

    def getHRIndex(self):
        return _tulipCM.odeNormalAdultSimplePA_getHRIndex(self)
odeNormalAdultSimplePA_swigregister = _tulipCM.odeNormalAdultSimplePA_swigregister
odeNormalAdultSimplePA_swigregister(odeNormalAdultSimplePA)
ip_0001_HR = cvar.ip_0001_HR
ip_0001_SBP = cvar.ip_0001_SBP
ip_0001_DBP = cvar.ip_0001_DBP
ip_0001_mBP = cvar.ip_0001_mBP
ip_0001_RAP = cvar.ip_0001_RAP
ip_0001_sPAP = cvar.ip_0001_sPAP
ip_0001_dPAP = cvar.ip_0001_dPAP
ip_0001_mPAP = cvar.ip_0001_mPAP
ip_0001_PWP = cvar.ip_0001_PWP
ip_0001_CO = cvar.ip_0001_CO
ip_0001_PVR = cvar.ip_0001_PVR
ip_0001_SVR = cvar.ip_0001_SVR
ip_0001_CVP = cvar.ip_0001_CVP
ip_0001_LVEF = cvar.ip_0001_LVEF
ip_0001_RVEF = cvar.ip_0001_RVEF
ip_0002_heart_rate2 = cvar.ip_0002_heart_rate2
ip_0002_systolic_bp_2 = cvar.ip_0002_systolic_bp_2
ip_0002_diastolic_bp_2 = cvar.ip_0002_diastolic_bp_2
ip_0002_cardiac_output = cvar.ip_0002_cardiac_output
ip_0002_systemic_vascular_resistan = cvar.ip_0002_systemic_vascular_resistan
ip_0002_pulmonary_vascular_resista = cvar.ip_0002_pulmonary_vascular_resista
ip_0002_cvp = cvar.ip_0002_cvp
ip_0002_right_ventricle_diastole = cvar.ip_0002_right_ventricle_diastole
ip_0002_right_ventricle_systole = cvar.ip_0002_right_ventricle_systole
ip_0002_rvedp = cvar.ip_0002_rvedp
ip_0002_aov_mean_pg = cvar.ip_0002_aov_mean_pg
ip_0002_aov_peak_pg = cvar.ip_0002_aov_peak_pg
ip_0002_mv_decel_time = cvar.ip_0002_mv_decel_time
ip_0002_mv_e_a_ratio = cvar.ip_0002_mv_e_a_ratio
ip_0002_pv_at = cvar.ip_0002_pv_at
ip_0002_pv_max_pg = cvar.ip_0002_pv_max_pg
ip_0002_ra_pressure = cvar.ip_0002_ra_pressure
ip_0002_ra_vol_a4c = cvar.ip_0002_ra_vol_a4c
ip_0002_la_vol_a4c = cvar.ip_0002_la_vol_a4c
ip_0002_lv_esv = cvar.ip_0002_lv_esv
ip_0002_lv_vol = cvar.ip_0002_lv_vol
ip_0002_lvef = cvar.ip_0002_lvef
ip_0002_lvot_max_flow = cvar.ip_0002_lvot_max_flow
ip_0002_pap_diastolic = cvar.ip_0002_pap_diastolic
ip_0002_pap_systolic = cvar.ip_0002_pap_systolic
ip_0002_wedge_pressure = cvar.ip_0002_wedge_pressure
modelVersion = cvar.modelVersion
ipTargetConfig_ExcludePAP = cvar.ipTargetConfig_ExcludePAP
ipTargetConfig_HRBPCVP = cvar.ipTargetConfig_HRBPCVP
targetConfigMode = cvar.targetConfigMode

class stdVec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, stdVec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, stdVec, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _tulipCM.stdVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _tulipCM.stdVec___nonzero__(self)

    def __bool__(self):
        return _tulipCM.stdVec___bool__(self)

    def __len__(self):
        return _tulipCM.stdVec___len__(self)

    def __getslice__(self, i, j):
        return _tulipCM.stdVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _tulipCM.stdVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _tulipCM.stdVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _tulipCM.stdVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _tulipCM.stdVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _tulipCM.stdVec___setitem__(self, *args)

    def pop(self):
        return _tulipCM.stdVec_pop(self)

    def append(self, x):
        return _tulipCM.stdVec_append(self, x)

    def empty(self):
        return _tulipCM.stdVec_empty(self)

    def size(self):
        return _tulipCM.stdVec_size(self)

    def swap(self, v):
        return _tulipCM.stdVec_swap(self, v)

    def begin(self):
        return _tulipCM.stdVec_begin(self)

    def end(self):
        return _tulipCM.stdVec_end(self)

    def rbegin(self):
        return _tulipCM.stdVec_rbegin(self)

    def rend(self):
        return _tulipCM.stdVec_rend(self)

    def clear(self):
        return _tulipCM.stdVec_clear(self)

    def get_allocator(self):
        return _tulipCM.stdVec_get_allocator(self)

    def pop_back(self):
        return _tulipCM.stdVec_pop_back(self)

    def erase(self, *args):
        return _tulipCM.stdVec_erase(self, *args)

    def __init__(self, *args):
        this = _tulipCM.new_stdVec(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _tulipCM.stdVec_push_back(self, x)

    def front(self):
        return _tulipCM.stdVec_front(self)

    def back(self):
        return _tulipCM.stdVec_back(self)

    def assign(self, n, x):
        return _tulipCM.stdVec_assign(self, n, x)

    def resize(self, *args):
        return _tulipCM.stdVec_resize(self, *args)

    def insert(self, *args):
        return _tulipCM.stdVec_insert(self, *args)

    def reserve(self, n):
        return _tulipCM.stdVec_reserve(self, n)

    def capacity(self):
        return _tulipCM.stdVec_capacity(self)
    __swig_destroy__ = _tulipCM.delete_stdVec
    __del__ = lambda self: None
stdVec_swigregister = _tulipCM.stdVec_swigregister
stdVec_swigregister(stdVec)

class stdIntVec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, stdIntVec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, stdIntVec, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _tulipCM.stdIntVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _tulipCM.stdIntVec___nonzero__(self)

    def __bool__(self):
        return _tulipCM.stdIntVec___bool__(self)

    def __len__(self):
        return _tulipCM.stdIntVec___len__(self)

    def __getslice__(self, i, j):
        return _tulipCM.stdIntVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _tulipCM.stdIntVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _tulipCM.stdIntVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _tulipCM.stdIntVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _tulipCM.stdIntVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _tulipCM.stdIntVec___setitem__(self, *args)

    def pop(self):
        return _tulipCM.stdIntVec_pop(self)

    def append(self, x):
        return _tulipCM.stdIntVec_append(self, x)

    def empty(self):
        return _tulipCM.stdIntVec_empty(self)

    def size(self):
        return _tulipCM.stdIntVec_size(self)

    def swap(self, v):
        return _tulipCM.stdIntVec_swap(self, v)

    def begin(self):
        return _tulipCM.stdIntVec_begin(self)

    def end(self):
        return _tulipCM.stdIntVec_end(self)

    def rbegin(self):
        return _tulipCM.stdIntVec_rbegin(self)

    def rend(self):
        return _tulipCM.stdIntVec_rend(self)

    def clear(self):
        return _tulipCM.stdIntVec_clear(self)

    def get_allocator(self):
        return _tulipCM.stdIntVec_get_allocator(self)

    def pop_back(self):
        return _tulipCM.stdIntVec_pop_back(self)

    def erase(self, *args):
        return _tulipCM.stdIntVec_erase(self, *args)

    def __init__(self, *args):
        this = _tulipCM.new_stdIntVec(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _tulipCM.stdIntVec_push_back(self, x)

    def front(self):
        return _tulipCM.stdIntVec_front(self)

    def back(self):
        return _tulipCM.stdIntVec_back(self)

    def assign(self, n, x):
        return _tulipCM.stdIntVec_assign(self, n, x)

    def resize(self, *args):
        return _tulipCM.stdIntVec_resize(self, *args)

    def insert(self, *args):
        return _tulipCM.stdIntVec_insert(self, *args)

    def reserve(self, n):
        return _tulipCM.stdIntVec_reserve(self, n)

    def capacity(self):
        return _tulipCM.stdIntVec_capacity(self)
    __swig_destroy__ = _tulipCM.delete_stdIntVec
    __del__ = lambda self: None
stdIntVec_swigregister = _tulipCM.stdIntVec_swigregister
stdIntVec_swigregister(stdIntVec)

class stdMat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, stdMat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, stdMat, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _tulipCM.stdMat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _tulipCM.stdMat___nonzero__(self)

    def __bool__(self):
        return _tulipCM.stdMat___bool__(self)

    def __len__(self):
        return _tulipCM.stdMat___len__(self)

    def __getslice__(self, i, j):
        return _tulipCM.stdMat___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _tulipCM.stdMat___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _tulipCM.stdMat___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _tulipCM.stdMat___delitem__(self, *args)

    def __getitem__(self, *args):
        return _tulipCM.stdMat___getitem__(self, *args)

    def __setitem__(self, *args):
        return _tulipCM.stdMat___setitem__(self, *args)

    def pop(self):
        return _tulipCM.stdMat_pop(self)

    def append(self, x):
        return _tulipCM.stdMat_append(self, x)

    def empty(self):
        return _tulipCM.stdMat_empty(self)

    def size(self):
        return _tulipCM.stdMat_size(self)

    def swap(self, v):
        return _tulipCM.stdMat_swap(self, v)

    def begin(self):
        return _tulipCM.stdMat_begin(self)

    def end(self):
        return _tulipCM.stdMat_end(self)

    def rbegin(self):
        return _tulipCM.stdMat_rbegin(self)

    def rend(self):
        return _tulipCM.stdMat_rend(self)

    def clear(self):
        return _tulipCM.stdMat_clear(self)

    def get_allocator(self):
        return _tulipCM.stdMat_get_allocator(self)

    def pop_back(self):
        return _tulipCM.stdMat_pop_back(self)

    def erase(self, *args):
        return _tulipCM.stdMat_erase(self, *args)

    def __init__(self, *args):
        this = _tulipCM.new_stdMat(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _tulipCM.stdMat_push_back(self, x)

    def front(self):
        return _tulipCM.stdMat_front(self)

    def back(self):
        return _tulipCM.stdMat_back(self)

    def assign(self, n, x):
        return _tulipCM.stdMat_assign(self, n, x)

    def resize(self, *args):
        return _tulipCM.stdMat_resize(self, *args)

    def insert(self, *args):
        return _tulipCM.stdMat_insert(self, *args)

    def reserve(self, n):
        return _tulipCM.stdMat_reserve(self, n)

    def capacity(self):
        return _tulipCM.stdMat_capacity(self)
    __swig_destroy__ = _tulipCM.delete_stdMat
    __del__ = lambda self: None
stdMat_swigregister = _tulipCM.stdMat_swigregister
stdMat_swigregister(stdMat)

class stdStringVec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, stdStringVec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, stdStringVec, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _tulipCM.stdStringVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _tulipCM.stdStringVec___nonzero__(self)

    def __bool__(self):
        return _tulipCM.stdStringVec___bool__(self)

    def __len__(self):
        return _tulipCM.stdStringVec___len__(self)

    def __getslice__(self, i, j):
        return _tulipCM.stdStringVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _tulipCM.stdStringVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _tulipCM.stdStringVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _tulipCM.stdStringVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _tulipCM.stdStringVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _tulipCM.stdStringVec___setitem__(self, *args)

    def pop(self):
        return _tulipCM.stdStringVec_pop(self)

    def append(self, x):
        return _tulipCM.stdStringVec_append(self, x)

    def empty(self):
        return _tulipCM.stdStringVec_empty(self)

    def size(self):
        return _tulipCM.stdStringVec_size(self)

    def swap(self, v):
        return _tulipCM.stdStringVec_swap(self, v)

    def begin(self):
        return _tulipCM.stdStringVec_begin(self)

    def end(self):
        return _tulipCM.stdStringVec_end(self)

    def rbegin(self):
        return _tulipCM.stdStringVec_rbegin(self)

    def rend(self):
        return _tulipCM.stdStringVec_rend(self)

    def clear(self):
        return _tulipCM.stdStringVec_clear(self)

    def get_allocator(self):
        return _tulipCM.stdStringVec_get_allocator(self)

    def pop_back(self):
        return _tulipCM.stdStringVec_pop_back(self)

    def erase(self, *args):
        return _tulipCM.stdStringVec_erase(self, *args)

    def __init__(self, *args):
        this = _tulipCM.new_stdStringVec(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _tulipCM.stdStringVec_push_back(self, x)

    def front(self):
        return _tulipCM.stdStringVec_front(self)

    def back(self):
        return _tulipCM.stdStringVec_back(self)

    def assign(self, n, x):
        return _tulipCM.stdStringVec_assign(self, n, x)

    def resize(self, *args):
        return _tulipCM.stdStringVec_resize(self, *args)

    def insert(self, *args):
        return _tulipCM.stdStringVec_insert(self, *args)

    def reserve(self, n):
        return _tulipCM.stdStringVec_reserve(self, n)

    def capacity(self):
        return _tulipCM.stdStringVec_capacity(self)
    __swig_destroy__ = _tulipCM.delete_stdStringVec
    __del__ = lambda self: None
stdStringVec_swigregister = _tulipCM.stdStringVec_swigregister
stdStringVec_swigregister(stdStringVec)

class stdStringMat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, stdStringMat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, stdStringMat, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _tulipCM.stdStringMat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _tulipCM.stdStringMat___nonzero__(self)

    def __bool__(self):
        return _tulipCM.stdStringMat___bool__(self)

    def __len__(self):
        return _tulipCM.stdStringMat___len__(self)

    def __getslice__(self, i, j):
        return _tulipCM.stdStringMat___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _tulipCM.stdStringMat___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _tulipCM.stdStringMat___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _tulipCM.stdStringMat___delitem__(self, *args)

    def __getitem__(self, *args):
        return _tulipCM.stdStringMat___getitem__(self, *args)

    def __setitem__(self, *args):
        return _tulipCM.stdStringMat___setitem__(self, *args)

    def pop(self):
        return _tulipCM.stdStringMat_pop(self)

    def append(self, x):
        return _tulipCM.stdStringMat_append(self, x)

    def empty(self):
        return _tulipCM.stdStringMat_empty(self)

    def size(self):
        return _tulipCM.stdStringMat_size(self)

    def swap(self, v):
        return _tulipCM.stdStringMat_swap(self, v)

    def begin(self):
        return _tulipCM.stdStringMat_begin(self)

    def end(self):
        return _tulipCM.stdStringMat_end(self)

    def rbegin(self):
        return _tulipCM.stdStringMat_rbegin(self)

    def rend(self):
        return _tulipCM.stdStringMat_rend(self)

    def clear(self):
        return _tulipCM.stdStringMat_clear(self)

    def get_allocator(self):
        return _tulipCM.stdStringMat_get_allocator(self)

    def pop_back(self):
        return _tulipCM.stdStringMat_pop_back(self)

    def erase(self, *args):
        return _tulipCM.stdStringMat_erase(self, *args)

    def __init__(self, *args):
        this = _tulipCM.new_stdStringMat(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _tulipCM.stdStringMat_push_back(self, x)

    def front(self):
        return _tulipCM.stdStringMat_front(self)

    def back(self):
        return _tulipCM.stdStringMat_back(self)

    def assign(self, n, x):
        return _tulipCM.stdStringMat_assign(self, n, x)

    def resize(self, *args):
        return _tulipCM.stdStringMat_resize(self, *args)

    def insert(self, *args):
        return _tulipCM.stdStringMat_insert(self, *args)

    def reserve(self, n):
        return _tulipCM.stdStringMat_reserve(self, n)

    def capacity(self):
        return _tulipCM.stdStringMat_capacity(self)
    __swig_destroy__ = _tulipCM.delete_stdStringMat
    __del__ = lambda self: None
stdStringMat_swigregister = _tulipCM.stdStringMat_swigregister
stdStringMat_swigregister(stdStringMat)

# This file is compatible with both classic and new-style classes.


