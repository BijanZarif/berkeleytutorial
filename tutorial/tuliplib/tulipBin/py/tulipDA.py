# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_tulipDA', [dirname(__file__)])
        except ImportError:
            import _tulipDA
            return _tulipDA
        if fp is not None:
            try:
                _mod = imp.load_module('_tulipDA', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _tulipDA = swig_import_helper()
    del swig_import_helper
else:
    import _tulipDA
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _tulipDA.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _tulipDA.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _tulipDA.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _tulipDA.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _tulipDA.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _tulipDA.SwigPyIterator_equal(self, x)

    def copy(self):
        return _tulipDA.SwigPyIterator_copy(self)

    def next(self):
        return _tulipDA.SwigPyIterator_next(self)

    def __next__(self):
        return _tulipDA.SwigPyIterator___next__(self)

    def previous(self):
        return _tulipDA.SwigPyIterator_previous(self)

    def advance(self, n):
        return _tulipDA.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _tulipDA.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _tulipDA.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _tulipDA.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _tulipDA.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _tulipDA.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _tulipDA.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _tulipDA.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class daData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, daData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, daData, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _tulipDA.delete_daData
    __del__ = lambda self: None

    def readFromFile(self, fileName):
        return _tulipDA.daData_readFromFile(self, fileName)

    def evalOBJ(self, dataIndex, keys, values, weights):
        return _tulipDA.daData_evalOBJ(self, dataIndex, keys, values, weights)

    def evalLogLikelihood(self, dataIndex, keys, avValues, stdFactors, weights):
        return _tulipDA.daData_evalLogLikelihood(self, dataIndex, keys, avValues, stdFactors, weights)

    def evalLikelihood(self, dataIndex, keys, avValues, stdFactors, weights):
        return _tulipDA.daData_evalLikelihood(self, dataIndex, keys, avValues, stdFactors, weights)

    def printAndCompare(self, dataIndex, keys, values, weigths):
        return _tulipDA.daData_printAndCompare(self, dataIndex, keys, values, weigths)

    def getPatientValue(self, patientID, key, result):
        return _tulipDA.daData_getPatientValue(self, patientID, key, result)

    def printToScreen(self, patientIndex):
        return _tulipDA.daData_printToScreen(self, patientIndex)

    def clear(self):
        return _tulipDA.daData_clear(self)

    def extractKeyValues(self, refKeys, unUsedKeys, outKeys, outValues):
        return _tulipDA.daData_extractKeyValues(self, refKeys, unUsedKeys, outKeys, outValues)

    def addKeyValue(self, key, value):
        return _tulipDA.daData_addKeyValue(self, key, value)

    def removeKeyValue(self, key):
        return _tulipDA.daData_removeKeyValue(self, key)
daData_swigregister = _tulipDA.daData_swigregister
daData_swigregister(daData)

class daException(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, daException, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, daException, name)
    __repr__ = _swig_repr

    def __init__(self, m):
        this = _tulipDA.new_daException(m)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _tulipDA.delete_daException
    __del__ = lambda self: None

    def what(self):
        return _tulipDA.daException_what(self)
daException_swigregister = _tulipDA.daException_swigregister
daException_swigregister(daException)

class daData_single_GPatient(daData):
    __swig_setmethods__ = {}
    for _s in [daData]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, daData_single_GPatient, name, value)
    __swig_getmethods__ = {}
    for _s in [daData]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, daData_single_GPatient, name)
    __repr__ = _swig_repr

    def __init__(self, keyColumn, timeStampColumn):
        this = _tulipDA.new_daData_single_GPatient(keyColumn, timeStampColumn)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _tulipDA.delete_daData_single_GPatient
    __del__ = lambda self: None

    def readFromFile(self, filaName):
        return _tulipDA.daData_single_GPatient_readFromFile(self, filaName)

    def evalOBJ(self, dataIndex, keys, values, weights):
        return _tulipDA.daData_single_GPatient_evalOBJ(self, dataIndex, keys, values, weights)

    def evalLogLikelihood(self, dataIndex, keys, avValues, stdFactors, weights):
        return _tulipDA.daData_single_GPatient_evalLogLikelihood(self, dataIndex, keys, avValues, stdFactors, weights)

    def evalLikelihood(self, dataIndex, keys, avValues, stdFactors, weights):
        return _tulipDA.daData_single_GPatient_evalLikelihood(self, dataIndex, keys, avValues, stdFactors, weights)

    def printAndCompare(self, dataIndex, keys, values, weigths):
        return _tulipDA.daData_single_GPatient_printAndCompare(self, dataIndex, keys, values, weigths)

    def getPatientValue(self, patientID, key, result):
        return _tulipDA.daData_single_GPatient_getPatientValue(self, patientID, key, result)

    def getAvailableKeys(self, foundKeys):
        return _tulipDA.daData_single_GPatient_getAvailableKeys(self, foundKeys)
daData_single_GPatient_swigregister = _tulipDA.daData_single_GPatient_swigregister
daData_single_GPatient_swigregister(daData_single_GPatient)

class daData_multiple_Table(daData):
    __swig_setmethods__ = {}
    for _s in [daData]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, daData_multiple_Table, name, value)
    __swig_getmethods__ = {}
    for _s in [daData]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, daData_multiple_Table, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _tulipDA.new_daData_multiple_Table()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _tulipDA.delete_daData_multiple_Table
    __del__ = lambda self: None

    def readFromFile(self, fileName):
        return _tulipDA.daData_multiple_Table_readFromFile(self, fileName)

    def evalOBJ(self, dataIndex, keys, values, weights):
        return _tulipDA.daData_multiple_Table_evalOBJ(self, dataIndex, keys, values, weights)

    def evalLogLikelihood(self, dataIndex, keys, avValues, stdFactors, weights):
        return _tulipDA.daData_multiple_Table_evalLogLikelihood(self, dataIndex, keys, avValues, stdFactors, weights)

    def evalLikelihood(self, dataIndex, keys, avValues, stdFactors, weights):
        return _tulipDA.daData_multiple_Table_evalLikelihood(self, dataIndex, keys, avValues, stdFactors, weights)

    def printAndCompare(self, dataIndex, keys, values, weigths):
        return _tulipDA.daData_multiple_Table_printAndCompare(self, dataIndex, keys, values, weigths)

    def getPatientValue(self, patientID, key, result):
        return _tulipDA.daData_multiple_Table_getPatientValue(self, patientID, key, result)
daData_multiple_Table_swigregister = _tulipDA.daData_multiple_Table_swigregister
daData_multiple_Table_swigregister(daData_multiple_Table)

class stdVec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, stdVec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, stdVec, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _tulipDA.stdVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _tulipDA.stdVec___nonzero__(self)

    def __bool__(self):
        return _tulipDA.stdVec___bool__(self)

    def __len__(self):
        return _tulipDA.stdVec___len__(self)

    def __getslice__(self, i, j):
        return _tulipDA.stdVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _tulipDA.stdVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _tulipDA.stdVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _tulipDA.stdVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _tulipDA.stdVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _tulipDA.stdVec___setitem__(self, *args)

    def pop(self):
        return _tulipDA.stdVec_pop(self)

    def append(self, x):
        return _tulipDA.stdVec_append(self, x)

    def empty(self):
        return _tulipDA.stdVec_empty(self)

    def size(self):
        return _tulipDA.stdVec_size(self)

    def swap(self, v):
        return _tulipDA.stdVec_swap(self, v)

    def begin(self):
        return _tulipDA.stdVec_begin(self)

    def end(self):
        return _tulipDA.stdVec_end(self)

    def rbegin(self):
        return _tulipDA.stdVec_rbegin(self)

    def rend(self):
        return _tulipDA.stdVec_rend(self)

    def clear(self):
        return _tulipDA.stdVec_clear(self)

    def get_allocator(self):
        return _tulipDA.stdVec_get_allocator(self)

    def pop_back(self):
        return _tulipDA.stdVec_pop_back(self)

    def erase(self, *args):
        return _tulipDA.stdVec_erase(self, *args)

    def __init__(self, *args):
        this = _tulipDA.new_stdVec(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _tulipDA.stdVec_push_back(self, x)

    def front(self):
        return _tulipDA.stdVec_front(self)

    def back(self):
        return _tulipDA.stdVec_back(self)

    def assign(self, n, x):
        return _tulipDA.stdVec_assign(self, n, x)

    def resize(self, *args):
        return _tulipDA.stdVec_resize(self, *args)

    def insert(self, *args):
        return _tulipDA.stdVec_insert(self, *args)

    def reserve(self, n):
        return _tulipDA.stdVec_reserve(self, n)

    def capacity(self):
        return _tulipDA.stdVec_capacity(self)
    __swig_destroy__ = _tulipDA.delete_stdVec
    __del__ = lambda self: None
stdVec_swigregister = _tulipDA.stdVec_swigregister
stdVec_swigregister(stdVec)

class stdIntVec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, stdIntVec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, stdIntVec, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _tulipDA.stdIntVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _tulipDA.stdIntVec___nonzero__(self)

    def __bool__(self):
        return _tulipDA.stdIntVec___bool__(self)

    def __len__(self):
        return _tulipDA.stdIntVec___len__(self)

    def __getslice__(self, i, j):
        return _tulipDA.stdIntVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _tulipDA.stdIntVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _tulipDA.stdIntVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _tulipDA.stdIntVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _tulipDA.stdIntVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _tulipDA.stdIntVec___setitem__(self, *args)

    def pop(self):
        return _tulipDA.stdIntVec_pop(self)

    def append(self, x):
        return _tulipDA.stdIntVec_append(self, x)

    def empty(self):
        return _tulipDA.stdIntVec_empty(self)

    def size(self):
        return _tulipDA.stdIntVec_size(self)

    def swap(self, v):
        return _tulipDA.stdIntVec_swap(self, v)

    def begin(self):
        return _tulipDA.stdIntVec_begin(self)

    def end(self):
        return _tulipDA.stdIntVec_end(self)

    def rbegin(self):
        return _tulipDA.stdIntVec_rbegin(self)

    def rend(self):
        return _tulipDA.stdIntVec_rend(self)

    def clear(self):
        return _tulipDA.stdIntVec_clear(self)

    def get_allocator(self):
        return _tulipDA.stdIntVec_get_allocator(self)

    def pop_back(self):
        return _tulipDA.stdIntVec_pop_back(self)

    def erase(self, *args):
        return _tulipDA.stdIntVec_erase(self, *args)

    def __init__(self, *args):
        this = _tulipDA.new_stdIntVec(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _tulipDA.stdIntVec_push_back(self, x)

    def front(self):
        return _tulipDA.stdIntVec_front(self)

    def back(self):
        return _tulipDA.stdIntVec_back(self)

    def assign(self, n, x):
        return _tulipDA.stdIntVec_assign(self, n, x)

    def resize(self, *args):
        return _tulipDA.stdIntVec_resize(self, *args)

    def insert(self, *args):
        return _tulipDA.stdIntVec_insert(self, *args)

    def reserve(self, n):
        return _tulipDA.stdIntVec_reserve(self, n)

    def capacity(self):
        return _tulipDA.stdIntVec_capacity(self)
    __swig_destroy__ = _tulipDA.delete_stdIntVec
    __del__ = lambda self: None
stdIntVec_swigregister = _tulipDA.stdIntVec_swigregister
stdIntVec_swigregister(stdIntVec)

class stdMat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, stdMat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, stdMat, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _tulipDA.stdMat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _tulipDA.stdMat___nonzero__(self)

    def __bool__(self):
        return _tulipDA.stdMat___bool__(self)

    def __len__(self):
        return _tulipDA.stdMat___len__(self)

    def __getslice__(self, i, j):
        return _tulipDA.stdMat___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _tulipDA.stdMat___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _tulipDA.stdMat___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _tulipDA.stdMat___delitem__(self, *args)

    def __getitem__(self, *args):
        return _tulipDA.stdMat___getitem__(self, *args)

    def __setitem__(self, *args):
        return _tulipDA.stdMat___setitem__(self, *args)

    def pop(self):
        return _tulipDA.stdMat_pop(self)

    def append(self, x):
        return _tulipDA.stdMat_append(self, x)

    def empty(self):
        return _tulipDA.stdMat_empty(self)

    def size(self):
        return _tulipDA.stdMat_size(self)

    def swap(self, v):
        return _tulipDA.stdMat_swap(self, v)

    def begin(self):
        return _tulipDA.stdMat_begin(self)

    def end(self):
        return _tulipDA.stdMat_end(self)

    def rbegin(self):
        return _tulipDA.stdMat_rbegin(self)

    def rend(self):
        return _tulipDA.stdMat_rend(self)

    def clear(self):
        return _tulipDA.stdMat_clear(self)

    def get_allocator(self):
        return _tulipDA.stdMat_get_allocator(self)

    def pop_back(self):
        return _tulipDA.stdMat_pop_back(self)

    def erase(self, *args):
        return _tulipDA.stdMat_erase(self, *args)

    def __init__(self, *args):
        this = _tulipDA.new_stdMat(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _tulipDA.stdMat_push_back(self, x)

    def front(self):
        return _tulipDA.stdMat_front(self)

    def back(self):
        return _tulipDA.stdMat_back(self)

    def assign(self, n, x):
        return _tulipDA.stdMat_assign(self, n, x)

    def resize(self, *args):
        return _tulipDA.stdMat_resize(self, *args)

    def insert(self, *args):
        return _tulipDA.stdMat_insert(self, *args)

    def reserve(self, n):
        return _tulipDA.stdMat_reserve(self, n)

    def capacity(self):
        return _tulipDA.stdMat_capacity(self)
    __swig_destroy__ = _tulipDA.delete_stdMat
    __del__ = lambda self: None
stdMat_swigregister = _tulipDA.stdMat_swigregister
stdMat_swigregister(stdMat)

class stdStringVec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, stdStringVec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, stdStringVec, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _tulipDA.stdStringVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _tulipDA.stdStringVec___nonzero__(self)

    def __bool__(self):
        return _tulipDA.stdStringVec___bool__(self)

    def __len__(self):
        return _tulipDA.stdStringVec___len__(self)

    def __getslice__(self, i, j):
        return _tulipDA.stdStringVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _tulipDA.stdStringVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _tulipDA.stdStringVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _tulipDA.stdStringVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _tulipDA.stdStringVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _tulipDA.stdStringVec___setitem__(self, *args)

    def pop(self):
        return _tulipDA.stdStringVec_pop(self)

    def append(self, x):
        return _tulipDA.stdStringVec_append(self, x)

    def empty(self):
        return _tulipDA.stdStringVec_empty(self)

    def size(self):
        return _tulipDA.stdStringVec_size(self)

    def swap(self, v):
        return _tulipDA.stdStringVec_swap(self, v)

    def begin(self):
        return _tulipDA.stdStringVec_begin(self)

    def end(self):
        return _tulipDA.stdStringVec_end(self)

    def rbegin(self):
        return _tulipDA.stdStringVec_rbegin(self)

    def rend(self):
        return _tulipDA.stdStringVec_rend(self)

    def clear(self):
        return _tulipDA.stdStringVec_clear(self)

    def get_allocator(self):
        return _tulipDA.stdStringVec_get_allocator(self)

    def pop_back(self):
        return _tulipDA.stdStringVec_pop_back(self)

    def erase(self, *args):
        return _tulipDA.stdStringVec_erase(self, *args)

    def __init__(self, *args):
        this = _tulipDA.new_stdStringVec(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _tulipDA.stdStringVec_push_back(self, x)

    def front(self):
        return _tulipDA.stdStringVec_front(self)

    def back(self):
        return _tulipDA.stdStringVec_back(self)

    def assign(self, n, x):
        return _tulipDA.stdStringVec_assign(self, n, x)

    def resize(self, *args):
        return _tulipDA.stdStringVec_resize(self, *args)

    def insert(self, *args):
        return _tulipDA.stdStringVec_insert(self, *args)

    def reserve(self, n):
        return _tulipDA.stdStringVec_reserve(self, n)

    def capacity(self):
        return _tulipDA.stdStringVec_capacity(self)
    __swig_destroy__ = _tulipDA.delete_stdStringVec
    __del__ = lambda self: None
stdStringVec_swigregister = _tulipDA.stdStringVec_swigregister
stdStringVec_swigregister(stdStringVec)

class stdStringMat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, stdStringMat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, stdStringMat, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _tulipDA.stdStringMat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _tulipDA.stdStringMat___nonzero__(self)

    def __bool__(self):
        return _tulipDA.stdStringMat___bool__(self)

    def __len__(self):
        return _tulipDA.stdStringMat___len__(self)

    def __getslice__(self, i, j):
        return _tulipDA.stdStringMat___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _tulipDA.stdStringMat___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _tulipDA.stdStringMat___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _tulipDA.stdStringMat___delitem__(self, *args)

    def __getitem__(self, *args):
        return _tulipDA.stdStringMat___getitem__(self, *args)

    def __setitem__(self, *args):
        return _tulipDA.stdStringMat___setitem__(self, *args)

    def pop(self):
        return _tulipDA.stdStringMat_pop(self)

    def append(self, x):
        return _tulipDA.stdStringMat_append(self, x)

    def empty(self):
        return _tulipDA.stdStringMat_empty(self)

    def size(self):
        return _tulipDA.stdStringMat_size(self)

    def swap(self, v):
        return _tulipDA.stdStringMat_swap(self, v)

    def begin(self):
        return _tulipDA.stdStringMat_begin(self)

    def end(self):
        return _tulipDA.stdStringMat_end(self)

    def rbegin(self):
        return _tulipDA.stdStringMat_rbegin(self)

    def rend(self):
        return _tulipDA.stdStringMat_rend(self)

    def clear(self):
        return _tulipDA.stdStringMat_clear(self)

    def get_allocator(self):
        return _tulipDA.stdStringMat_get_allocator(self)

    def pop_back(self):
        return _tulipDA.stdStringMat_pop_back(self)

    def erase(self, *args):
        return _tulipDA.stdStringMat_erase(self, *args)

    def __init__(self, *args):
        this = _tulipDA.new_stdStringMat(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _tulipDA.stdStringMat_push_back(self, x)

    def front(self):
        return _tulipDA.stdStringMat_front(self)

    def back(self):
        return _tulipDA.stdStringMat_back(self)

    def assign(self, n, x):
        return _tulipDA.stdStringMat_assign(self, n, x)

    def resize(self, *args):
        return _tulipDA.stdStringMat_resize(self, *args)

    def insert(self, *args):
        return _tulipDA.stdStringMat_insert(self, *args)

    def reserve(self, n):
        return _tulipDA.stdStringMat_reserve(self, n)

    def capacity(self):
        return _tulipDA.stdStringMat_capacity(self)
    __swig_destroy__ = _tulipDA.delete_stdStringMat
    __del__ = lambda self: None
stdStringMat_swigregister = _tulipDA.stdStringMat_swigregister
stdStringMat_swigregister(stdStringMat)

# This file is compatible with both classic and new-style classes.


