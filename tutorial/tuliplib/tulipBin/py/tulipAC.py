# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_tulipAC', [dirname(__file__)])
        except ImportError:
            import _tulipAC
            return _tulipAC
        if fp is not None:
            try:
                _mod = imp.load_module('_tulipAC', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _tulipAC = swig_import_helper()
    del swig_import_helper
else:
    import _tulipAC
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _tulipAC.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _tulipAC.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _tulipAC.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _tulipAC.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _tulipAC.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _tulipAC.SwigPyIterator_equal(self, x)

    def copy(self):
        return _tulipAC.SwigPyIterator_copy(self)

    def next(self):
        return _tulipAC.SwigPyIterator_next(self)

    def __next__(self):
        return _tulipAC.SwigPyIterator___next__(self)

    def previous(self):
        return _tulipAC.SwigPyIterator_previous(self)

    def advance(self, n):
        return _tulipAC.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _tulipAC.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _tulipAC.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _tulipAC.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _tulipAC.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _tulipAC.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _tulipAC.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _tulipAC.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class acAction(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, acAction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, acAction, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _tulipAC.delete_acAction
    __del__ = lambda self: None

    def setModel(self, currModel):
        return _tulipAC.acAction_setModel(self, currModel)

    def go(self):
        return _tulipAC.acAction_go(self)
acAction_swigregister = _tulipAC.acAction_swigregister
acAction_swigregister(acAction)

class acException(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, acException, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, acException, name)
    __repr__ = _swig_repr

    def __init__(self, m):
        this = _tulipAC.new_acException(m)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _tulipAC.delete_acException
    __del__ = lambda self: None

    def what(self):
        return _tulipAC.acException_what(self)
acException_swigregister = _tulipAC.acException_swigregister
acException_swigregister(acException)

class acActionGSI(acAction):
    __swig_setmethods__ = {}
    for _s in [acAction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, acActionGSI, name, value)
    __swig_getmethods__ = {}
    for _s in [acAction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, acActionGSI, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _tulipAC.new_acActionGSI()
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def go(self):
        return _tulipAC.acActionGSI_go(self)
    __swig_destroy__ = _tulipAC.delete_acActionGSI
    __del__ = lambda self: None
acActionGSI_swigregister = _tulipAC.acActionGSI_swigregister
acActionGSI_swigregister(acActionGSI)

class acActionLSI_FD(acAction):
    __swig_setmethods__ = {}
    for _s in [acAction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, acActionLSI_FD, name, value)
    __swig_getmethods__ = {}
    for _s in [acAction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, acActionLSI_FD, name)
    __repr__ = _swig_repr

    def __init__(self, specifyParamLocation, initialParamFile, perturbFactor, evalDeriv):
        this = _tulipAC.new_acActionLSI_FD(specifyParamLocation, initialParamFile, perturbFactor, evalDeriv)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def go(self):
        return _tulipAC.acActionLSI_FD_go(self)
    __swig_destroy__ = _tulipAC.delete_acActionLSI_FD
    __del__ = lambda self: None
acActionLSI_FD_swigregister = _tulipAC.acActionLSI_FD_swigregister
acActionLSI_FD_swigregister(acActionLSI_FD)

class acAction_OBJProfile(acAction):
    __swig_setmethods__ = {}
    for _s in [acAction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, acAction_OBJProfile, name, value)
    __swig_getmethods__ = {}
    for _s in [acAction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, acAction_OBJProfile, name)
    __repr__ = _swig_repr

    def __init__(self, locTotalProfileSteps, locInitialPointFromFile, locStartFromCenter, locInitialPointFile):
        this = _tulipAC.new_acAction_OBJProfile(locTotalProfileSteps, locInitialPointFromFile, locStartFromCenter, locInitialPointFile)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def go(self):
        return _tulipAC.acAction_OBJProfile_go(self)
    __swig_destroy__ = _tulipAC.delete_acAction_OBJProfile
    __del__ = lambda self: None
acAction_OBJProfile_swigregister = _tulipAC.acAction_OBJProfile_swigregister
acAction_OBJProfile_swigregister(acAction_OBJProfile)

class acActionOPT_NM(acAction):
    __swig_setmethods__ = {}
    for _s in [acAction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, acActionOPT_NM, name, value)
    __swig_getmethods__ = {}
    for _s in [acAction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, acActionOPT_NM, name)
    __repr__ = _swig_repr

    def __init__(self, localConvTol, localConvUpdateIt, localMaxOptIt, stepCoefficient):
        this = _tulipAC.new_acActionOPT_NM(localConvTol, localConvUpdateIt, localMaxOptIt, stepCoefficient)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def setInitialPointFromFile(self, value):
        return _tulipAC.acActionOPT_NM_setInitialPointFromFile(self, value)

    def setInitialPointFile(self, file):
        return _tulipAC.acActionOPT_NM_setInitialPointFile(self, file)

    def getOptimalParameter(self, idx):
        return _tulipAC.acActionOPT_NM_getOptimalParameter(self, idx)

    def setInitialParamGuess(self, localUseStartingParameterFromFile, localStartFromCenter, localStartParameterFile):
        return _tulipAC.acActionOPT_NM_setInitialParamGuess(self, localUseStartingParameterFromFile, localStartFromCenter, localStartParameterFile)

    def setMessagesPrinting(self, flag):
        return _tulipAC.acActionOPT_NM_setMessagesPrinting(self, flag)

    def go(self):
        return _tulipAC.acActionOPT_NM_go(self)
    __swig_destroy__ = _tulipAC.delete_acActionOPT_NM
    __del__ = lambda self: None
acActionOPT_NM_swigregister = _tulipAC.acActionOPT_NM_swigregister
acActionOPT_NM_swigregister(acActionOPT_NM)

class acActionOPT_RSSD(acAction):
    __swig_setmethods__ = {}
    for _s in [acAction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, acActionOPT_RSSD, name, value)
    __swig_getmethods__ = {}
    for _s in [acAction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, acActionOPT_RSSD, name)
    __repr__ = _swig_repr

    def __init__(self, locStepSizeCoeff, locItMax, locStepLength, locNormTol, locNumComponentsToUpdate, locInitialPointFromFile, locStartFromCenter, locInitialPointFile):
        this = _tulipAC.new_acActionOPT_RSSD(locStepSizeCoeff, locItMax, locStepLength, locNormTol, locNumComponentsToUpdate, locInitialPointFromFile, locStartFromCenter, locInitialPointFile)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def go(self):
        return _tulipAC.acActionOPT_RSSD_go(self)
    __swig_destroy__ = _tulipAC.delete_acActionOPT_RSSD
    __del__ = lambda self: None
acActionOPT_RSSD_swigregister = _tulipAC.acActionOPT_RSSD_swigregister
acActionOPT_RSSD_swigregister(acActionOPT_RSSD)

class acActionDREAM(acAction):
    __swig_setmethods__ = {}
    for _s in [acAction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, acActionDREAM, name, value)
    __swig_getmethods__ = {}
    for _s in [acAction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, acActionDREAM, name)
    __repr__ = _swig_repr

    def __init__(self, totChains, locTotGenerations, locTotalCR, loctTotCrossoverPairs, locDreamChainFileName, locDreamGRFileName, locDreamGRThreshold, locDreamJumpStep, locDreamGRPrintStep, locDreamRestartReadFileName, locDreamRestartWriteFileName, usePriorFromFile, priorFileName, priorModelType):
        this = _tulipAC.new_acActionDREAM(totChains, locTotGenerations, locTotalCR, loctTotCrossoverPairs, locDreamChainFileName, locDreamGRFileName, locDreamGRThreshold, locDreamJumpStep, locDreamGRPrintStep, locDreamRestartReadFileName, locDreamRestartWriteFileName, usePriorFromFile, priorFileName, priorModelType)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def postProcess(self, debugMode, burnInPercent):
        return _tulipAC.acActionDREAM_postProcess(self, debugMode, burnInPercent)

    def go(self):
        return _tulipAC.acActionDREAM_go(self)
    __swig_destroy__ = _tulipAC.delete_acActionDREAM
    __del__ = lambda self: None
acActionDREAM_swigregister = _tulipAC.acActionDREAM_swigregister
acActionDREAM_swigregister(acActionDREAM)

class acActionUP(acAction):
    __swig_setmethods__ = {}
    for _s in [acAction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, acActionUP, name, value)
    __swig_getmethods__ = {}
    for _s in [acAction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, acActionUP, name)
    __repr__ = _swig_repr

    def __init__(self, locInputs=None, locOutputs=None):
        this = _tulipAC.new_acActionUP(locInputs, locOutputs)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def getStats(self, index):
        return _tulipAC.acActionUP_getStats(self, index)

    def go(self):
        return _tulipAC.acActionUP_go(self)
    __swig_destroy__ = _tulipAC.delete_acActionUP
    __del__ = lambda self: None
acActionUP_swigregister = _tulipAC.acActionUP_swigregister
acActionUP_swigregister(acActionUP)

class mcOptions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mcOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mcOptions, name)
    __repr__ = _swig_repr
    __swig_setmethods__["numberOfRepeats"] = _tulipAC.mcOptions_numberOfRepeats_set
    __swig_getmethods__["numberOfRepeats"] = _tulipAC.mcOptions_numberOfRepeats_get
    if _newclass:
        numberOfRepeats = _swig_property(_tulipAC.mcOptions_numberOfRepeats_get, _tulipAC.mcOptions_numberOfRepeats_set)
    __swig_setmethods__["sampleGroups"] = _tulipAC.mcOptions_sampleGroups_set
    __swig_getmethods__["sampleGroups"] = _tulipAC.mcOptions_sampleGroups_get
    if _newclass:
        sampleGroups = _swig_property(_tulipAC.mcOptions_sampleGroups_get, _tulipAC.mcOptions_sampleGroups_set)

    def __init__(self):
        this = _tulipAC.new_mcOptions()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _tulipAC.delete_mcOptions
    __del__ = lambda self: None
mcOptions_swigregister = _tulipAC.mcOptions_swigregister
mcOptions_swigregister(mcOptions)

class acActionUP_MC(acActionUP):
    __swig_setmethods__ = {}
    for _s in [acActionUP]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, acActionUP_MC, name, value)
    __swig_getmethods__ = {}
    for _s in [acActionUP]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, acActionUP_MC, name)
    __repr__ = _swig_repr
    __swig_setmethods__["opts"] = _tulipAC.acActionUP_MC_opts_set
    __swig_getmethods__["opts"] = _tulipAC.acActionUP_MC_opts_get
    if _newclass:
        opts = _swig_property(_tulipAC.acActionUP_MC_opts_get, _tulipAC.acActionUP_MC_opts_set)
    __swig_setmethods__["avgStats"] = _tulipAC.acActionUP_MC_avgStats_set
    __swig_getmethods__["avgStats"] = _tulipAC.acActionUP_MC_avgStats_get
    if _newclass:
        avgStats = _swig_property(_tulipAC.acActionUP_MC_avgStats_get, _tulipAC.acActionUP_MC_avgStats_set)
    __swig_setmethods__["stdStats"] = _tulipAC.acActionUP_MC_stdStats_set
    __swig_getmethods__["stdStats"] = _tulipAC.acActionUP_MC_stdStats_get
    if _newclass:
        stdStats = _swig_property(_tulipAC.acActionUP_MC_stdStats_get, _tulipAC.acActionUP_MC_stdStats_set)

    def __init__(self, locInputs):
        this = _tulipAC.new_acActionUP_MC(locInputs)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def getStats(self, index):
        return _tulipAC.acActionUP_MC_getStats(self, index)

    def go(self):
        return _tulipAC.acActionUP_MC_go(self)

    def printStatsToFile(self, fileName):
        return _tulipAC.acActionUP_MC_printStatsToFile(self, fileName)
    __swig_destroy__ = _tulipAC.delete_acActionUP_MC
    __del__ = lambda self: None
acActionUP_MC_swigregister = _tulipAC.acActionUP_MC_swigregister
acActionUP_MC_swigregister(acActionUP_MC)


_tulipAC.imRandom_swigconstant(_tulipAC)
imRandom = _tulipAC.imRandom

_tulipAC.imGrid_swigconstant(_tulipAC)
imGrid = _tulipAC.imGrid

_tulipAC.imTable_swigconstant(_tulipAC)
imTable = _tulipAC.imTable

_tulipAC.imCVSimVTK_swigconstant(_tulipAC)
imCVSimVTK = _tulipAC.imCVSimVTK

_tulipAC.imFromMCMC_swigconstant(_tulipAC)
imFromMCMC = _tulipAC.imFromMCMC

_tulipAC.stRandom_swigconstant(_tulipAC)
stRandom = _tulipAC.stRandom

_tulipAC.stHalton_swigconstant(_tulipAC)
stHalton = _tulipAC.stHalton

_tulipAC.miUnit_swigconstant(_tulipAC)
miUnit = _tulipAC.miUnit

_tulipAC.miFromSamples_swigconstant(_tulipAC)
miFromSamples = _tulipAC.miFromSamples

_tulipAC.miFromBetaMarginals_swigconstant(_tulipAC)
miFromBetaMarginals = _tulipAC.miFromBetaMarginals
class mwbcsOptions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mwbcsOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mwbcsOptions, name)
    __repr__ = _swig_repr
    __swig_setmethods__["numIniSamples"] = _tulipAC.mwbcsOptions_numIniSamples_set
    __swig_getmethods__["numIniSamples"] = _tulipAC.mwbcsOptions_numIniSamples_get
    if _newclass:
        numIniSamples = _swig_property(_tulipAC.mwbcsOptions_numIniSamples_get, _tulipAC.mwbcsOptions_numIniSamples_set)
    __swig_setmethods__["doRefineSpace"] = _tulipAC.mwbcsOptions_doRefineSpace_set
    __swig_getmethods__["doRefineSpace"] = _tulipAC.mwbcsOptions_doRefineSpace_get
    if _newclass:
        doRefineSpace = _swig_property(_tulipAC.mwbcsOptions_doRefineSpace_get, _tulipAC.mwbcsOptions_doRefineSpace_set)
    __swig_setmethods__["doRefineSamples"] = _tulipAC.mwbcsOptions_doRefineSamples_set
    __swig_getmethods__["doRefineSamples"] = _tulipAC.mwbcsOptions_doRefineSamples_get
    if _newclass:
        doRefineSamples = _swig_property(_tulipAC.mwbcsOptions_doRefineSamples_get, _tulipAC.mwbcsOptions_doRefineSamples_set)
    __swig_setmethods__["inputMode"] = _tulipAC.mwbcsOptions_inputMode_set
    __swig_getmethods__["inputMode"] = _tulipAC.mwbcsOptions_inputMode_get
    if _newclass:
        inputMode = _swig_property(_tulipAC.mwbcsOptions_inputMode_get, _tulipAC.mwbcsOptions_inputMode_set)
    __swig_setmethods__["samplingType"] = _tulipAC.mwbcsOptions_samplingType_set
    __swig_getmethods__["samplingType"] = _tulipAC.mwbcsOptions_samplingType_get
    if _newclass:
        samplingType = _swig_property(_tulipAC.mwbcsOptions_samplingType_get, _tulipAC.mwbcsOptions_samplingType_set)
    __swig_setmethods__["tableInputFileName"] = _tulipAC.mwbcsOptions_tableInputFileName_set
    __swig_getmethods__["tableInputFileName"] = _tulipAC.mwbcsOptions_tableInputFileName_get
    if _newclass:
        tableInputFileName = _swig_property(_tulipAC.mwbcsOptions_tableInputFileName_get, _tulipAC.mwbcsOptions_tableInputFileName_set)
    __swig_setmethods__["tableOutputFileName"] = _tulipAC.mwbcsOptions_tableOutputFileName_set
    __swig_getmethods__["tableOutputFileName"] = _tulipAC.mwbcsOptions_tableOutputFileName_get
    if _newclass:
        tableOutputFileName = _swig_property(_tulipAC.mwbcsOptions_tableOutputFileName_get, _tulipAC.mwbcsOptions_tableOutputFileName_set)
    __swig_setmethods__["measureInputMode"] = _tulipAC.mwbcsOptions_measureInputMode_set
    __swig_getmethods__["measureInputMode"] = _tulipAC.mwbcsOptions_measureInputMode_get
    if _newclass:
        measureInputMode = _swig_property(_tulipAC.mwbcsOptions_measureInputMode_get, _tulipAC.mwbcsOptions_measureInputMode_set)
    __swig_setmethods__["measureInputFileName"] = _tulipAC.mwbcsOptions_measureInputFileName_set
    __swig_getmethods__["measureInputFileName"] = _tulipAC.mwbcsOptions_measureInputFileName_get
    if _newclass:
        measureInputFileName = _swig_property(_tulipAC.mwbcsOptions_measureInputFileName_get, _tulipAC.mwbcsOptions_measureInputFileName_set)
    __swig_setmethods__["useBetaFactors"] = _tulipAC.mwbcsOptions_useBetaFactors_set
    __swig_getmethods__["useBetaFactors"] = _tulipAC.mwbcsOptions_useBetaFactors_get
    if _newclass:
        useBetaFactors = _swig_property(_tulipAC.mwbcsOptions_useBetaFactors_get, _tulipAC.mwbcsOptions_useBetaFactors_set)
    __swig_setmethods__["readBetaFactorsFromFile"] = _tulipAC.mwbcsOptions_readBetaFactorsFromFile_set
    __swig_getmethods__["readBetaFactorsFromFile"] = _tulipAC.mwbcsOptions_readBetaFactorsFromFile_get
    if _newclass:
        readBetaFactorsFromFile = _swig_property(_tulipAC.mwbcsOptions_readBetaFactorsFromFile_get, _tulipAC.mwbcsOptions_readBetaFactorsFromFile_set)
    __swig_setmethods__["betaFactorFileName"] = _tulipAC.mwbcsOptions_betaFactorFileName_set
    __swig_getmethods__["betaFactorFileName"] = _tulipAC.mwbcsOptions_betaFactorFileName_get
    if _newclass:
        betaFactorFileName = _swig_property(_tulipAC.mwbcsOptions_betaFactorFileName_get, _tulipAC.mwbcsOptions_betaFactorFileName_set)
    __swig_setmethods__["addBoundaryPoints"] = _tulipAC.mwbcsOptions_addBoundaryPoints_set
    __swig_getmethods__["addBoundaryPoints"] = _tulipAC.mwbcsOptions_addBoundaryPoints_get
    if _newclass:
        addBoundaryPoints = _swig_property(_tulipAC.mwbcsOptions_addBoundaryPoints_get, _tulipAC.mwbcsOptions_addBoundaryPoints_set)
    __swig_setmethods__["boundaryPointOrder"] = _tulipAC.mwbcsOptions_boundaryPointOrder_set
    __swig_getmethods__["boundaryPointOrder"] = _tulipAC.mwbcsOptions_boundaryPointOrder_get
    if _newclass:
        boundaryPointOrder = _swig_property(_tulipAC.mwbcsOptions_boundaryPointOrder_get, _tulipAC.mwbcsOptions_boundaryPointOrder_set)
    __swig_setmethods__["maxMWOrder"] = _tulipAC.mwbcsOptions_maxMWOrder_set
    __swig_getmethods__["maxMWOrder"] = _tulipAC.mwbcsOptions_maxMWOrder_get
    if _newclass:
        maxMWOrder = _swig_property(_tulipAC.mwbcsOptions_maxMWOrder_get, _tulipAC.mwbcsOptions_maxMWOrder_set)
    __swig_setmethods__["maxGridOrder"] = _tulipAC.mwbcsOptions_maxGridOrder_set
    __swig_getmethods__["maxGridOrder"] = _tulipAC.mwbcsOptions_maxGridOrder_get
    if _newclass:
        maxGridOrder = _swig_property(_tulipAC.mwbcsOptions_maxGridOrder_get, _tulipAC.mwbcsOptions_maxGridOrder_set)
    __swig_setmethods__["mwQuadOrder"] = _tulipAC.mwbcsOptions_mwQuadOrder_set
    __swig_getmethods__["mwQuadOrder"] = _tulipAC.mwbcsOptions_mwQuadOrder_get
    if _newclass:
        mwQuadOrder = _swig_property(_tulipAC.mwbcsOptions_mwQuadOrder_get, _tulipAC.mwbcsOptions_mwQuadOrder_set)
    __swig_setmethods__["outputColumn"] = _tulipAC.mwbcsOptions_outputColumn_set
    __swig_getmethods__["outputColumn"] = _tulipAC.mwbcsOptions_outputColumn_get
    if _newclass:
        outputColumn = _swig_property(_tulipAC.mwbcsOptions_outputColumn_get, _tulipAC.mwbcsOptions_outputColumn_set)
    __swig_setmethods__["thresholdSize"] = _tulipAC.mwbcsOptions_thresholdSize_set
    __swig_getmethods__["thresholdSize"] = _tulipAC.mwbcsOptions_thresholdSize_get
    if _newclass:
        thresholdSize = _swig_property(_tulipAC.mwbcsOptions_thresholdSize_get, _tulipAC.mwbcsOptions_thresholdSize_set)
    __swig_setmethods__["minSamplesInPartition"] = _tulipAC.mwbcsOptions_minSamplesInPartition_set
    __swig_getmethods__["minSamplesInPartition"] = _tulipAC.mwbcsOptions_minSamplesInPartition_get
    if _newclass:
        minSamplesInPartition = _swig_property(_tulipAC.mwbcsOptions_minSamplesInPartition_get, _tulipAC.mwbcsOptions_minSamplesInPartition_set)
    __swig_setmethods__["maxPartitionSizeRatio"] = _tulipAC.mwbcsOptions_maxPartitionSizeRatio_set
    __swig_getmethods__["maxPartitionSizeRatio"] = _tulipAC.mwbcsOptions_maxPartitionSizeRatio_get
    if _newclass:
        maxPartitionSizeRatio = _swig_property(_tulipAC.mwbcsOptions_maxPartitionSizeRatio_get, _tulipAC.mwbcsOptions_maxPartitionSizeRatio_set)
    __swig_setmethods__["maxMWVarianceRatio"] = _tulipAC.mwbcsOptions_maxMWVarianceRatio_set
    __swig_getmethods__["maxMWVarianceRatio"] = _tulipAC.mwbcsOptions_maxMWVarianceRatio_get
    if _newclass:
        maxMWVarianceRatio = _swig_property(_tulipAC.mwbcsOptions_maxMWVarianceRatio_get, _tulipAC.mwbcsOptions_maxMWVarianceRatio_set)
    __swig_setmethods__["vtkNodeToExtract"] = _tulipAC.mwbcsOptions_vtkNodeToExtract_set
    __swig_getmethods__["vtkNodeToExtract"] = _tulipAC.mwbcsOptions_vtkNodeToExtract_get
    if _newclass:
        vtkNodeToExtract = _swig_property(_tulipAC.mwbcsOptions_vtkNodeToExtract_get, _tulipAC.mwbcsOptions_vtkNodeToExtract_set)
    __swig_setmethods__["forceRVMSolution"] = _tulipAC.mwbcsOptions_forceRVMSolution_set
    __swig_getmethods__["forceRVMSolution"] = _tulipAC.mwbcsOptions_forceRVMSolution_get
    if _newclass:
        forceRVMSolution = _swig_property(_tulipAC.mwbcsOptions_forceRVMSolution_get, _tulipAC.mwbcsOptions_forceRVMSolution_set)
    __swig_setmethods__["resToleranceRatio"] = _tulipAC.mwbcsOptions_resToleranceRatio_set
    __swig_getmethods__["resToleranceRatio"] = _tulipAC.mwbcsOptions_resToleranceRatio_get
    if _newclass:
        resToleranceRatio = _swig_property(_tulipAC.mwbcsOptions_resToleranceRatio_get, _tulipAC.mwbcsOptions_resToleranceRatio_set)
    __swig_setmethods__["computeErrorMetrics"] = _tulipAC.mwbcsOptions_computeErrorMetrics_set
    __swig_getmethods__["computeErrorMetrics"] = _tulipAC.mwbcsOptions_computeErrorMetrics_get
    if _newclass:
        computeErrorMetrics = _swig_property(_tulipAC.mwbcsOptions_computeErrorMetrics_get, _tulipAC.mwbcsOptions_computeErrorMetrics_set)
    __swig_setmethods__["printPartitionTree"] = _tulipAC.mwbcsOptions_printPartitionTree_set
    __swig_getmethods__["printPartitionTree"] = _tulipAC.mwbcsOptions_printPartitionTree_get
    if _newclass:
        printPartitionTree = _swig_property(_tulipAC.mwbcsOptions_printPartitionTree_get, _tulipAC.mwbcsOptions_printPartitionTree_set)
    __swig_setmethods__["printInputOutputSamples"] = _tulipAC.mwbcsOptions_printInputOutputSamples_set
    __swig_getmethods__["printInputOutputSamples"] = _tulipAC.mwbcsOptions_printInputOutputSamples_get
    if _newclass:
        printInputOutputSamples = _swig_property(_tulipAC.mwbcsOptions_printInputOutputSamples_get, _tulipAC.mwbcsOptions_printInputOutputSamples_set)
    __swig_setmethods__["printPartitionSamples"] = _tulipAC.mwbcsOptions_printPartitionSamples_set
    __swig_getmethods__["printPartitionSamples"] = _tulipAC.mwbcsOptions_printPartitionSamples_get
    if _newclass:
        printPartitionSamples = _swig_property(_tulipAC.mwbcsOptions_printPartitionSamples_get, _tulipAC.mwbcsOptions_printPartitionSamples_set)
    __swig_setmethods__["printAndEvalSurrogate"] = _tulipAC.mwbcsOptions_printAndEvalSurrogate_set
    __swig_getmethods__["printAndEvalSurrogate"] = _tulipAC.mwbcsOptions_printAndEvalSurrogate_get
    if _newclass:
        printAndEvalSurrogate = _swig_property(_tulipAC.mwbcsOptions_printAndEvalSurrogate_get, _tulipAC.mwbcsOptions_printAndEvalSurrogate_set)
    __swig_setmethods__["printPartitionMonitor"] = _tulipAC.mwbcsOptions_printPartitionMonitor_set
    __swig_getmethods__["printPartitionMonitor"] = _tulipAC.mwbcsOptions_printPartitionMonitor_get
    if _newclass:
        printPartitionMonitor = _swig_property(_tulipAC.mwbcsOptions_printPartitionMonitor_get, _tulipAC.mwbcsOptions_printPartitionMonitor_set)
    __swig_setmethods__["printOverallStats"] = _tulipAC.mwbcsOptions_printOverallStats_set
    __swig_getmethods__["printOverallStats"] = _tulipAC.mwbcsOptions_printOverallStats_get
    if _newclass:
        printOverallStats = _swig_property(_tulipAC.mwbcsOptions_printOverallStats_get, _tulipAC.mwbcsOptions_printOverallStats_set)
    __swig_setmethods__["simulPrefix"] = _tulipAC.mwbcsOptions_simulPrefix_set
    __swig_getmethods__["simulPrefix"] = _tulipAC.mwbcsOptions_simulPrefix_get
    if _newclass:
        simulPrefix = _swig_property(_tulipAC.mwbcsOptions_simulPrefix_get, _tulipAC.mwbcsOptions_simulPrefix_set)
    __swig_setmethods__["printProgress"] = _tulipAC.mwbcsOptions_printProgress_set
    __swig_getmethods__["printProgress"] = _tulipAC.mwbcsOptions_printProgress_get
    if _newclass:
        printProgress = _swig_property(_tulipAC.mwbcsOptions_printProgress_get, _tulipAC.mwbcsOptions_printProgress_set)
    __swig_setmethods__["printDBGMessages"] = _tulipAC.mwbcsOptions_printDBGMessages_set
    __swig_getmethods__["printDBGMessages"] = _tulipAC.mwbcsOptions_printDBGMessages_get
    if _newclass:
        printDBGMessages = _swig_property(_tulipAC.mwbcsOptions_printDBGMessages_get, _tulipAC.mwbcsOptions_printDBGMessages_set)

    def __init__(self):
        this = _tulipAC.new_mwbcsOptions()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _tulipAC.delete_mwbcsOptions
    __del__ = lambda self: None
mwbcsOptions_swigregister = _tulipAC.mwbcsOptions_swigregister
mwbcsOptions_swigregister(mwbcsOptions)

class acActionUP_MWBCS(acActionUP):
    __swig_setmethods__ = {}
    for _s in [acActionUP]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, acActionUP_MWBCS, name, value)
    __swig_getmethods__ = {}
    for _s in [acActionUP]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, acActionUP_MWBCS, name)
    __repr__ = _swig_repr
    __swig_setmethods__["opts"] = _tulipAC.acActionUP_MWBCS_opts_set
    __swig_getmethods__["opts"] = _tulipAC.acActionUP_MWBCS_opts_get
    if _newclass:
        opts = _swig_property(_tulipAC.acActionUP_MWBCS_opts_get, _tulipAC.acActionUP_MWBCS_opts_set)
    __swig_setmethods__["partitionTree"] = _tulipAC.acActionUP_MWBCS_partitionTree_set
    __swig_getmethods__["partitionTree"] = _tulipAC.acActionUP_MWBCS_partitionTree_get
    if _newclass:
        partitionTree = _swig_property(_tulipAC.acActionUP_MWBCS_partitionTree_get, _tulipAC.acActionUP_MWBCS_partitionTree_set)
    __swig_setmethods__["globalAVG"] = _tulipAC.acActionUP_MWBCS_globalAVG_set
    __swig_getmethods__["globalAVG"] = _tulipAC.acActionUP_MWBCS_globalAVG_get
    if _newclass:
        globalAVG = _swig_property(_tulipAC.acActionUP_MWBCS_globalAVG_get, _tulipAC.acActionUP_MWBCS_globalAVG_set)
    __swig_setmethods__["globalSTD"] = _tulipAC.acActionUP_MWBCS_globalSTD_set
    __swig_getmethods__["globalSTD"] = _tulipAC.acActionUP_MWBCS_globalSTD_get
    if _newclass:
        globalSTD = _swig_property(_tulipAC.acActionUP_MWBCS_globalSTD_get, _tulipAC.acActionUP_MWBCS_globalSTD_set)
    __swig_setmethods__["betaFactors"] = _tulipAC.acActionUP_MWBCS_betaFactors_set
    __swig_getmethods__["betaFactors"] = _tulipAC.acActionUP_MWBCS_betaFactors_get
    if _newclass:
        betaFactors = _swig_property(_tulipAC.acActionUP_MWBCS_betaFactors_get, _tulipAC.acActionUP_MWBCS_betaFactors_set)
    __swig_setmethods__["marginalMeasures"] = _tulipAC.acActionUP_MWBCS_marginalMeasures_set
    __swig_getmethods__["marginalMeasures"] = _tulipAC.acActionUP_MWBCS_marginalMeasures_get
    if _newclass:
        marginalMeasures = _swig_property(_tulipAC.acActionUP_MWBCS_marginalMeasures_get, _tulipAC.acActionUP_MWBCS_marginalMeasures_set)

    def __init__(self, *args):
        this = _tulipAC.new_acActionUP_MWBCS(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _tulipAC.delete_acActionUP_MWBCS
    __del__ = lambda self: None

    def go(self):
        return _tulipAC.acActionUP_MWBCS_go(self)

    def evalSurrogate(self, params, surrogate):
        return _tulipAC.acActionUP_MWBCS_evalSurrogate(self, params, surrogate)

    def getVolume(self):
        return _tulipAC.acActionUP_MWBCS_getVolume(self)

    def evalMarginals(self, inputs, marginals):
        return _tulipAC.acActionUP_MWBCS_evalMarginals(self, inputs, marginals)

    def setDefaultOptions(self):
        return _tulipAC.acActionUP_MWBCS_setDefaultOptions(self)

    def generate1DMEApproximant(self, normalize=True):
        return _tulipAC.acActionUP_MWBCS_generate1DMEApproximant(self, normalize)
acActionUP_MWBCS_swigregister = _tulipAC.acActionUP_MWBCS_swigregister
acActionUP_MWBCS_swigregister(acActionUP_MWBCS)

class stdVec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, stdVec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, stdVec, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _tulipAC.stdVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _tulipAC.stdVec___nonzero__(self)

    def __bool__(self):
        return _tulipAC.stdVec___bool__(self)

    def __len__(self):
        return _tulipAC.stdVec___len__(self)

    def __getslice__(self, i, j):
        return _tulipAC.stdVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _tulipAC.stdVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _tulipAC.stdVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _tulipAC.stdVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _tulipAC.stdVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _tulipAC.stdVec___setitem__(self, *args)

    def pop(self):
        return _tulipAC.stdVec_pop(self)

    def append(self, x):
        return _tulipAC.stdVec_append(self, x)

    def empty(self):
        return _tulipAC.stdVec_empty(self)

    def size(self):
        return _tulipAC.stdVec_size(self)

    def swap(self, v):
        return _tulipAC.stdVec_swap(self, v)

    def begin(self):
        return _tulipAC.stdVec_begin(self)

    def end(self):
        return _tulipAC.stdVec_end(self)

    def rbegin(self):
        return _tulipAC.stdVec_rbegin(self)

    def rend(self):
        return _tulipAC.stdVec_rend(self)

    def clear(self):
        return _tulipAC.stdVec_clear(self)

    def get_allocator(self):
        return _tulipAC.stdVec_get_allocator(self)

    def pop_back(self):
        return _tulipAC.stdVec_pop_back(self)

    def erase(self, *args):
        return _tulipAC.stdVec_erase(self, *args)

    def __init__(self, *args):
        this = _tulipAC.new_stdVec(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _tulipAC.stdVec_push_back(self, x)

    def front(self):
        return _tulipAC.stdVec_front(self)

    def back(self):
        return _tulipAC.stdVec_back(self)

    def assign(self, n, x):
        return _tulipAC.stdVec_assign(self, n, x)

    def resize(self, *args):
        return _tulipAC.stdVec_resize(self, *args)

    def insert(self, *args):
        return _tulipAC.stdVec_insert(self, *args)

    def reserve(self, n):
        return _tulipAC.stdVec_reserve(self, n)

    def capacity(self):
        return _tulipAC.stdVec_capacity(self)
    __swig_destroy__ = _tulipAC.delete_stdVec
    __del__ = lambda self: None
stdVec_swigregister = _tulipAC.stdVec_swigregister
stdVec_swigregister(stdVec)

class stdIntVec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, stdIntVec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, stdIntVec, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _tulipAC.stdIntVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _tulipAC.stdIntVec___nonzero__(self)

    def __bool__(self):
        return _tulipAC.stdIntVec___bool__(self)

    def __len__(self):
        return _tulipAC.stdIntVec___len__(self)

    def __getslice__(self, i, j):
        return _tulipAC.stdIntVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _tulipAC.stdIntVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _tulipAC.stdIntVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _tulipAC.stdIntVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _tulipAC.stdIntVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _tulipAC.stdIntVec___setitem__(self, *args)

    def pop(self):
        return _tulipAC.stdIntVec_pop(self)

    def append(self, x):
        return _tulipAC.stdIntVec_append(self, x)

    def empty(self):
        return _tulipAC.stdIntVec_empty(self)

    def size(self):
        return _tulipAC.stdIntVec_size(self)

    def swap(self, v):
        return _tulipAC.stdIntVec_swap(self, v)

    def begin(self):
        return _tulipAC.stdIntVec_begin(self)

    def end(self):
        return _tulipAC.stdIntVec_end(self)

    def rbegin(self):
        return _tulipAC.stdIntVec_rbegin(self)

    def rend(self):
        return _tulipAC.stdIntVec_rend(self)

    def clear(self):
        return _tulipAC.stdIntVec_clear(self)

    def get_allocator(self):
        return _tulipAC.stdIntVec_get_allocator(self)

    def pop_back(self):
        return _tulipAC.stdIntVec_pop_back(self)

    def erase(self, *args):
        return _tulipAC.stdIntVec_erase(self, *args)

    def __init__(self, *args):
        this = _tulipAC.new_stdIntVec(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _tulipAC.stdIntVec_push_back(self, x)

    def front(self):
        return _tulipAC.stdIntVec_front(self)

    def back(self):
        return _tulipAC.stdIntVec_back(self)

    def assign(self, n, x):
        return _tulipAC.stdIntVec_assign(self, n, x)

    def resize(self, *args):
        return _tulipAC.stdIntVec_resize(self, *args)

    def insert(self, *args):
        return _tulipAC.stdIntVec_insert(self, *args)

    def reserve(self, n):
        return _tulipAC.stdIntVec_reserve(self, n)

    def capacity(self):
        return _tulipAC.stdIntVec_capacity(self)
    __swig_destroy__ = _tulipAC.delete_stdIntVec
    __del__ = lambda self: None
stdIntVec_swigregister = _tulipAC.stdIntVec_swigregister
stdIntVec_swigregister(stdIntVec)

class stdMat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, stdMat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, stdMat, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _tulipAC.stdMat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _tulipAC.stdMat___nonzero__(self)

    def __bool__(self):
        return _tulipAC.stdMat___bool__(self)

    def __len__(self):
        return _tulipAC.stdMat___len__(self)

    def __getslice__(self, i, j):
        return _tulipAC.stdMat___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _tulipAC.stdMat___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _tulipAC.stdMat___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _tulipAC.stdMat___delitem__(self, *args)

    def __getitem__(self, *args):
        return _tulipAC.stdMat___getitem__(self, *args)

    def __setitem__(self, *args):
        return _tulipAC.stdMat___setitem__(self, *args)

    def pop(self):
        return _tulipAC.stdMat_pop(self)

    def append(self, x):
        return _tulipAC.stdMat_append(self, x)

    def empty(self):
        return _tulipAC.stdMat_empty(self)

    def size(self):
        return _tulipAC.stdMat_size(self)

    def swap(self, v):
        return _tulipAC.stdMat_swap(self, v)

    def begin(self):
        return _tulipAC.stdMat_begin(self)

    def end(self):
        return _tulipAC.stdMat_end(self)

    def rbegin(self):
        return _tulipAC.stdMat_rbegin(self)

    def rend(self):
        return _tulipAC.stdMat_rend(self)

    def clear(self):
        return _tulipAC.stdMat_clear(self)

    def get_allocator(self):
        return _tulipAC.stdMat_get_allocator(self)

    def pop_back(self):
        return _tulipAC.stdMat_pop_back(self)

    def erase(self, *args):
        return _tulipAC.stdMat_erase(self, *args)

    def __init__(self, *args):
        this = _tulipAC.new_stdMat(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _tulipAC.stdMat_push_back(self, x)

    def front(self):
        return _tulipAC.stdMat_front(self)

    def back(self):
        return _tulipAC.stdMat_back(self)

    def assign(self, n, x):
        return _tulipAC.stdMat_assign(self, n, x)

    def resize(self, *args):
        return _tulipAC.stdMat_resize(self, *args)

    def insert(self, *args):
        return _tulipAC.stdMat_insert(self, *args)

    def reserve(self, n):
        return _tulipAC.stdMat_reserve(self, n)

    def capacity(self):
        return _tulipAC.stdMat_capacity(self)
    __swig_destroy__ = _tulipAC.delete_stdMat
    __del__ = lambda self: None
stdMat_swigregister = _tulipAC.stdMat_swigregister
stdMat_swigregister(stdMat)

class stdStringVec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, stdStringVec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, stdStringVec, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _tulipAC.stdStringVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _tulipAC.stdStringVec___nonzero__(self)

    def __bool__(self):
        return _tulipAC.stdStringVec___bool__(self)

    def __len__(self):
        return _tulipAC.stdStringVec___len__(self)

    def __getslice__(self, i, j):
        return _tulipAC.stdStringVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _tulipAC.stdStringVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _tulipAC.stdStringVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _tulipAC.stdStringVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _tulipAC.stdStringVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _tulipAC.stdStringVec___setitem__(self, *args)

    def pop(self):
        return _tulipAC.stdStringVec_pop(self)

    def append(self, x):
        return _tulipAC.stdStringVec_append(self, x)

    def empty(self):
        return _tulipAC.stdStringVec_empty(self)

    def size(self):
        return _tulipAC.stdStringVec_size(self)

    def swap(self, v):
        return _tulipAC.stdStringVec_swap(self, v)

    def begin(self):
        return _tulipAC.stdStringVec_begin(self)

    def end(self):
        return _tulipAC.stdStringVec_end(self)

    def rbegin(self):
        return _tulipAC.stdStringVec_rbegin(self)

    def rend(self):
        return _tulipAC.stdStringVec_rend(self)

    def clear(self):
        return _tulipAC.stdStringVec_clear(self)

    def get_allocator(self):
        return _tulipAC.stdStringVec_get_allocator(self)

    def pop_back(self):
        return _tulipAC.stdStringVec_pop_back(self)

    def erase(self, *args):
        return _tulipAC.stdStringVec_erase(self, *args)

    def __init__(self, *args):
        this = _tulipAC.new_stdStringVec(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _tulipAC.stdStringVec_push_back(self, x)

    def front(self):
        return _tulipAC.stdStringVec_front(self)

    def back(self):
        return _tulipAC.stdStringVec_back(self)

    def assign(self, n, x):
        return _tulipAC.stdStringVec_assign(self, n, x)

    def resize(self, *args):
        return _tulipAC.stdStringVec_resize(self, *args)

    def insert(self, *args):
        return _tulipAC.stdStringVec_insert(self, *args)

    def reserve(self, n):
        return _tulipAC.stdStringVec_reserve(self, n)

    def capacity(self):
        return _tulipAC.stdStringVec_capacity(self)
    __swig_destroy__ = _tulipAC.delete_stdStringVec
    __del__ = lambda self: None
stdStringVec_swigregister = _tulipAC.stdStringVec_swigregister
stdStringVec_swigregister(stdStringVec)

class stdStringMat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, stdStringMat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, stdStringMat, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _tulipAC.stdStringMat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _tulipAC.stdStringMat___nonzero__(self)

    def __bool__(self):
        return _tulipAC.stdStringMat___bool__(self)

    def __len__(self):
        return _tulipAC.stdStringMat___len__(self)

    def __getslice__(self, i, j):
        return _tulipAC.stdStringMat___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _tulipAC.stdStringMat___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _tulipAC.stdStringMat___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _tulipAC.stdStringMat___delitem__(self, *args)

    def __getitem__(self, *args):
        return _tulipAC.stdStringMat___getitem__(self, *args)

    def __setitem__(self, *args):
        return _tulipAC.stdStringMat___setitem__(self, *args)

    def pop(self):
        return _tulipAC.stdStringMat_pop(self)

    def append(self, x):
        return _tulipAC.stdStringMat_append(self, x)

    def empty(self):
        return _tulipAC.stdStringMat_empty(self)

    def size(self):
        return _tulipAC.stdStringMat_size(self)

    def swap(self, v):
        return _tulipAC.stdStringMat_swap(self, v)

    def begin(self):
        return _tulipAC.stdStringMat_begin(self)

    def end(self):
        return _tulipAC.stdStringMat_end(self)

    def rbegin(self):
        return _tulipAC.stdStringMat_rbegin(self)

    def rend(self):
        return _tulipAC.stdStringMat_rend(self)

    def clear(self):
        return _tulipAC.stdStringMat_clear(self)

    def get_allocator(self):
        return _tulipAC.stdStringMat_get_allocator(self)

    def pop_back(self):
        return _tulipAC.stdStringMat_pop_back(self)

    def erase(self, *args):
        return _tulipAC.stdStringMat_erase(self, *args)

    def __init__(self, *args):
        this = _tulipAC.new_stdStringMat(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _tulipAC.stdStringMat_push_back(self, x)

    def front(self):
        return _tulipAC.stdStringMat_front(self)

    def back(self):
        return _tulipAC.stdStringMat_back(self)

    def assign(self, n, x):
        return _tulipAC.stdStringMat_assign(self, n, x)

    def resize(self, *args):
        return _tulipAC.stdStringMat_resize(self, *args)

    def insert(self, *args):
        return _tulipAC.stdStringMat_insert(self, *args)

    def reserve(self, n):
        return _tulipAC.stdStringMat_reserve(self, n)

    def capacity(self):
        return _tulipAC.stdStringMat_capacity(self)
    __swig_destroy__ = _tulipAC.delete_stdStringMat
    __del__ = lambda self: None
stdStringMat_swigregister = _tulipAC.stdStringMat_swigregister
stdStringMat_swigregister(stdStringMat)

# This file is compatible with both classic and new-style classes.


